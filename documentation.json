{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppSettingsState",
            "id": "interface-AppSettingsState-75c6ef58438f74ad6056b78be806699a",
            "file": "src/app/core/store/app-settings/app-settings.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, Action, on } from '@ngrx/store';\r\n\r\nimport { Language } from '../../i18n';\r\nimport { appSettingsAction } from './app-settings.action';\r\n\r\nexport interface AppSettingsState {\r\n  language: Language;\r\n  theme: string;\r\n}\r\n\r\nconst initialState: AppSettingsState = {\r\n  language: 'en',\r\n  theme: 'DEFAULT-THEME'\r\n};\r\n\r\nconst reducer = createReducer(\r\n  initialState,\r\n  on(\r\n    appSettingsAction.changeLanguage,\r\n    (state, { language }) => ({ ...state, language })\r\n  ),\r\n);\r\n\r\nexport function appSettingsReducer(\r\n  state: AppSettingsState | undefined,\r\n  action: Action\r\n) {\r\n  return reducer(state, action);\r\n}\r\n",
            "properties": [
                {
                    "name": "language",
                    "type": "Language",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-47d533fd586d4afe45480946ec04fe84",
            "file": "src/app/core/store/reducer.ts",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, MetaReducer, Action } from '@ngrx/store';\r\nimport { routerReducer, RouterReducerState } from '@ngrx/router-store';\r\n\r\nimport { environment as env } from '@app/env';\r\nimport { RouterStateModel } from '../router';\r\nimport { logger, localStorageSyncReducer } from './meta-reducers';\r\nimport { AppSettingsState, appSettingsReducer } from './app-settings';\r\n\r\nexport interface AppState {\r\n  router: RouterReducerState<RouterStateModel>;\r\n  appSettings: AppSettingsState;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<AppState, Action> = {\r\n  router: routerReducer,\r\n  appSettings: appSettingsReducer\r\n};\r\n\r\nexport const metaReducers: Array<MetaReducer<AppState>> = !env.production\r\n  ? [logger, localStorageSyncReducer]\r\n  : [localStorageSyncReducer];\r\n",
            "properties": [
                {
                    "name": "appSettings",
                    "type": "AppSettingsState",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "router",
                    "type": "RouterReducerState<RouterStateModel>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AuthConfiguration",
            "id": "interface-AuthConfiguration-e0315e875b962ad823dc1caf798b0b5b",
            "file": "src/app/auth/auth.config.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken, Provider } from '@angular/core';\r\n\r\nexport const authFeatureKey = 'auth';\r\n\r\nexport const AUTH_CONFIGURATION = new InjectionToken<AuthConfiguration>('Auth configuration');\r\nexport interface AuthConfiguration {\r\n  loginURL: string;\r\n  loginApiURL: string;\r\n  headerName?: string;\r\n  skipWhenExpired?: boolean;\r\n  whitelistedDomains?: Array<string | RegExp>;\r\n  blacklistedRoutes?: Array<string | RegExp>;\r\n}\r\n\r\nexport const defaultAuthConfig: AuthConfiguration = {\r\n  loginURL: 'login',\r\n  loginApiURL: 'login',\r\n  headerName: 'Authorization',\r\n  skipWhenExpired: true,\r\n  whitelistedDomains: [],\r\n  blacklistedRoutes: []\r\n};\r\n\r\nexport function provideMockAuthConfig(config?: AuthConfiguration): Array<Provider> {\r\n  if (config === void 0) { config = defaultAuthConfig; }\r\n\r\n  return [\r\n    { provide: AUTH_CONFIGURATION, useValue: config }\r\n  ];\r\n}\r\n",
            "properties": [
                {
                    "name": "blacklistedRoutes",
                    "type": "Array<string | RegExp>",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "headerName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loginApiURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loginURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "skipWhenExpired",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "whitelistedDomains",
                    "type": "Array<string | RegExp>",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-7359961e21e9e8736fd33b1ce6f09c1a",
            "file": "src/app/auth/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, Action, combineReducers } from '@ngrx/store';\r\n\r\nimport { authFeatureKey } from '../auth.config';\r\nimport * as fromAuth from './auth.reducer';\r\nimport * as fromLoginPage from './login-page.reducer';\r\nimport * as fromResetPasswordPage from './reset-password-page.reducer';\r\n\r\nexport interface AuthState {\r\n  status: fromAuth.State;\r\n  loginPage: fromLoginPage.State;\r\n  resetPasswordPage: fromResetPasswordPage.State;\r\n}\r\n\r\nexport function authReducer(state: AuthState | undefined, action: Action) {\r\n  return combineReducers({\r\n    [fromAuth.statusFeatureKey]: fromAuth.reducer,\r\n    [fromLoginPage.loginPageFeatureKey]: fromLoginPage.reducer,\r\n    [fromResetPasswordPage.resetPasswordPageFeatureKey]: fromResetPasswordPage.reducer,\r\n  })(state, action);\r\n}\r\n\r\nexport const selectAuthState = createFeatureSelector<AuthState>(\r\n  authFeatureKey\r\n);\r\n",
            "properties": [
                {
                    "name": "loginPage",
                    "type": "fromLoginPage.State",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "resetPasswordPage",
                    "type": "fromResetPasswordPage.State",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "status",
                    "type": "fromAuth.State",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ContactModel",
            "id": "interface-ContactModel-f998fff1f251a64b665c8ac3d7008793",
            "file": "src/app/admin/contact/models/contact.model.ts",
            "type": "interface",
            "sourceCode": "export interface ContactModel {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  name: string;\r\n  phone: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ContactState",
            "id": "interface-ContactState-261c919936a99c6e6b8310c3b207827d",
            "file": "src/app/admin/contact/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, Action, combineReducers } from '@ngrx/store';\r\n\r\nimport { featureKey } from '../contact.config';\r\nimport * as fromContact from './contact.reducer';\r\nimport * as fromContactListPage from './contact-list-page.reducer';\r\nimport * as fromContactDetailPage from './contact-detail-page.reducer';\r\n\r\nexport interface ContactState {\r\n  contact: fromContact.State;\r\n  contactListPage: fromContactListPage.State;\r\n  contactDetailPage: fromContactDetailPage.State;\r\n}\r\n\r\nexport function reducer(state: ContactState | undefined, action: Action) {\r\n  return combineReducers({\r\n    contact: fromContact.reducer,\r\n    contactListPage: fromContactListPage.reducer,\r\n    contactDetailPage: fromContactDetailPage.reducer\r\n  })(state, action);\r\n}\r\n\r\nexport const selectContactState = createFeatureSelector<ContactState>(featureKey);\r\n",
            "properties": [
                {
                    "name": "contact",
                    "type": "fromContact.State",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "contactDetailPage",
                    "type": "fromContactDetailPage.State",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "contactListPage",
                    "type": "fromContactListPage.State",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CreateContactModel",
            "id": "interface-CreateContactModel-a04205c35d475a9ad6db127134f7f1c3",
            "file": "src/app/admin/contact/models/create-contact.model.ts",
            "type": "interface",
            "sourceCode": "export interface CreateContactModel {\r\n  username: string;\r\n  email: string;\r\n  name: string;\r\n  phone: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Credential",
            "id": "interface-Credential-036b9a1e32014aa9335b04e30525bad5",
            "file": "src/app/auth/models/credential.model.ts",
            "type": "interface",
            "sourceCode": "export interface Credential {\r\n  username: string;\r\n  password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FormValueChangeEvent",
            "id": "interface-FormValueChangeEvent-f01881aa05c0383fb52f76fa9d080d62",
            "file": "src/app/core/form/index.ts",
            "type": "interface",
            "sourceCode": "export interface FormValueChangeEvent {\r\n  valid: boolean;\r\n  value: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "valid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "HttpActionError",
            "id": "interface-HttpActionError-ecd67560b567ea42567d369261d8ad85",
            "file": "src/app/core/exception/http-action-error.ts",
            "type": "interface",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nimport { HttpError } from './http-error';\r\n\r\nexport interface HttpActionError {\r\n  action: Action;\r\n  error: HttpError;\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "type": "Action",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "error",
                    "type": "HttpError",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "HttpError",
            "id": "interface-HttpError-aa989873c91b89409cfaec1a4869f4a0",
            "file": "src/app/core/exception/http-error.ts",
            "type": "interface",
            "sourceCode": "export interface HttpError {\r\n  ok?: boolean;\r\n  type?: string;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "ok",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "status",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "statusText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ImageMessage",
            "id": "interface-ImageMessage-63e44ed1d4987ed15fde8c85feaa9d2b",
            "file": "src/app/admin/chat/models/message.ts",
            "type": "interface",
            "sourceCode": "import { User } from './user';\r\n\r\nexport enum MessageType {\r\n  text = 'text',\r\n  image = 'image',\r\n}\r\n\r\nexport interface MessagePayload {\r\n  type: MessageType;\r\n  content: any;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  sender: User;\r\n  payloads: Array<MessagePayload>;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface MessageGroup {\r\n  sender: User;\r\n  createdAt: string;\r\n  messages: Array<Message>;\r\n}\r\n\r\nexport interface ImageMessage {\r\n  url: string;\r\n  name?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoggerConfiguration",
            "id": "interface-LoggerConfiguration-603080a393858a139c49ebf21fd69e74",
            "file": "src/app/core/logger/logger.config.ts",
            "type": "interface",
            "sourceCode": "import { environment } from '@app/env';\r\n\r\n/**\r\n * Logger configuration\r\n *\r\n * @enable enable logger service\r\n */\r\nexport interface LoggerConfiguration {\r\n  enable: boolean;\r\n}\r\n\r\nexport const loggerConfig: LoggerConfiguration = {\r\n  enable: environment.enableLogger\r\n};\r\n",
            "properties": [
                {
                    "name": "enable",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Logger configuration</p>\n",
            "methods": []
        },
        {
            "name": "Message",
            "id": "interface-Message-63e44ed1d4987ed15fde8c85feaa9d2b",
            "file": "src/app/admin/chat/models/message.ts",
            "type": "interface",
            "sourceCode": "import { User } from './user';\r\n\r\nexport enum MessageType {\r\n  text = 'text',\r\n  image = 'image',\r\n}\r\n\r\nexport interface MessagePayload {\r\n  type: MessageType;\r\n  content: any;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  sender: User;\r\n  payloads: Array<MessagePayload>;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface MessageGroup {\r\n  sender: User;\r\n  createdAt: string;\r\n  messages: Array<Message>;\r\n}\r\n\r\nexport interface ImageMessage {\r\n  url: string;\r\n  name?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "createdAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "payloads",
                    "type": "Array<MessagePayload>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "sender",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MessageGroup",
            "id": "interface-MessageGroup-63e44ed1d4987ed15fde8c85feaa9d2b",
            "file": "src/app/admin/chat/models/message.ts",
            "type": "interface",
            "sourceCode": "import { User } from './user';\r\n\r\nexport enum MessageType {\r\n  text = 'text',\r\n  image = 'image',\r\n}\r\n\r\nexport interface MessagePayload {\r\n  type: MessageType;\r\n  content: any;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  sender: User;\r\n  payloads: Array<MessagePayload>;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface MessageGroup {\r\n  sender: User;\r\n  createdAt: string;\r\n  messages: Array<Message>;\r\n}\r\n\r\nexport interface ImageMessage {\r\n  url: string;\r\n  name?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "createdAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "messages",
                    "type": "Array<Message>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "sender",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MessagePayload",
            "id": "interface-MessagePayload-63e44ed1d4987ed15fde8c85feaa9d2b",
            "file": "src/app/admin/chat/models/message.ts",
            "type": "interface",
            "sourceCode": "import { User } from './user';\r\n\r\nexport enum MessageType {\r\n  text = 'text',\r\n  image = 'image',\r\n}\r\n\r\nexport interface MessagePayload {\r\n  type: MessageType;\r\n  content: any;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  sender: User;\r\n  payloads: Array<MessagePayload>;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface MessageGroup {\r\n  sender: User;\r\n  createdAt: string;\r\n  messages: Array<Message>;\r\n}\r\n\r\nexport interface ImageMessage {\r\n  url: string;\r\n  name?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "type": "MessageType",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NotificationConfig",
            "id": "interface-NotificationConfig-a68baff838e3a6e6973f775e2bf094c9",
            "file": "src/app/shared/notification/notification.ts",
            "type": "interface",
            "sourceCode": "import { MatSnackBarConfig } from '@angular/material/snack-bar';\r\n\r\nexport interface NotificationConfig {\r\n  message: string;\r\n  type?: 'info' | 'success' | 'warn' | 'error';\r\n  title?: string;\r\n  action?: string;\r\n  image?: string;\r\n  config?: MatSnackBarConfig;\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "config",
                    "type": "MatSnackBarConfig",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "type": "\"info\" | \"success\" | \"warn\" | \"error\"",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Pagination",
            "id": "interface-Pagination-5547558ee08a968c110310b51a6f78a1",
            "file": "src/app/core/data-table/pagination.model.ts",
            "type": "interface",
            "sourceCode": "export interface Pagination {\r\n  pageSize: number;\r\n  pageNumber: number;\r\n  totalElement: number;\r\n  totalPages?: number;\r\n}\r\n\r\nexport const initPagination = {\r\n  pageSize: 10,\r\n  pageNumber: 0,\r\n  totalElement: undefined,\r\n  totalPages: undefined\r\n};\r\n",
            "properties": [
                {
                    "name": "pageNumber",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "totalElement",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalPages",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RetryStrategyConfig",
            "id": "interface-RetryStrategyConfig-2a906a42176868ed163a6eeea999db55",
            "file": "src/app/core/http/interceptors/retry-interceptor.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable, throwError, timer } from 'rxjs';\r\nimport { mergeMap, retryWhen, catchError } from 'rxjs/operators';\r\n\r\nimport { environment } from '@app/env';\r\n\r\nexport interface RetryStrategyConfig {\r\n  maxRetryAttempts?: number;\r\n  scalingDuration?: number;\r\n  excludedStatusCodes?: Array<number>;\r\n}\r\n\r\nexport const defaultRetryStrategyConfig: RetryStrategyConfig = {\r\n  maxRetryAttempts: environment.http.maxRetryAttempts,\r\n  scalingDuration: 1000,\r\n  excludedStatusCodes: [401, 403, 404]\r\n};\r\n\r\nexport const genericRetryStrategy = (config: RetryStrategyConfig = defaultRetryStrategyConfig) =>\r\n  (attempts: Observable<any>) => {\r\n    return attempts.pipe(\r\n      mergeMap((error, i) => {\r\n        const retryAttempt = i + 1;\r\n        // if maximum number of retries have been met\r\n        // or response is a status code we don't wish to retry, throw error\r\n        if (retryAttempt > config.maxRetryAttempts ||\r\n          config.excludedStatusCodes.find(e => e === error.status)) {\r\n          return throwError(error);\r\n        }\r\n\r\n        return timer(retryAttempt * config.scalingDuration);\r\n      })\r\n    );\r\n  };\r\n\r\n@Injectable()\r\nexport class RetryHttpRequestInterceptor implements HttpInterceptor {\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next\r\n      .handle(req).pipe(\r\n        retryWhen(genericRetryStrategy()),\r\n        catchError((error: HttpErrorResponse) => {\r\n          return throwError(error);\r\n        })\r\n      );\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "excludedStatusCodes",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "maxRetryAttempts",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "scalingDuration",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RouterStateModel",
            "id": "interface-RouterStateModel-9d03f4673d98785cd4110a32647b5fb1",
            "file": "src/app/core/router/router.model.ts",
            "type": "interface",
            "sourceCode": "import { Params } from '@angular/router';\r\n\r\nexport interface RouterStateModel {\r\n  url: string;\r\n  params: Params;\r\n  queryParams: Params;\r\n}\r\n",
            "properties": [
                {
                    "name": "params",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "queryParams",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SentryConfiguration",
            "id": "interface-SentryConfiguration-f10ffff14cfc816b52da095322b0acbd",
            "file": "src/app/core/logger/sentry.config.ts",
            "type": "interface",
            "sourceCode": "export interface SentryConfiguration {\r\n  dsn: string;\r\n  environment: string;\r\n  release: string;\r\n}\r\n\r\nexport const defaultSentryConfig: SentryConfiguration = {\r\n  dsn: '<your-dsn>',\r\n  environment: 'dev',\r\n  release: '<your-release>'\r\n};\r\n",
            "properties": [
                {
                    "name": "dsn",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "environment",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "release",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Sentry configuration</p>\n",
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-925a8ceb1070e13f9f9d52e26a38859e",
            "file": "src/app/auth/reducers/auth.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\n\r\nimport { AuthToken, UserProfile } from '../models';\r\nimport { AuthApiActions, AuthActions } from '../actions';\r\n\r\nexport const statusFeatureKey = 'status';\r\n\r\nexport interface State {\r\n  authToken: AuthToken;\r\n  loggedInUser: UserProfile;\r\n}\r\n\r\nexport const initialState: State = {\r\n  authToken: undefined,\r\n  loggedInUser: {\r\n    id: 'fcad7516-9fec',\r\n    username: 'ponyaim',\r\n    avatarUrl: './assets/images/dev.png'\r\n  }\r\n};\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n\r\n  on(AuthApiActions.loginSuccess, (state, { authToken }) => ({\r\n    ...state,\r\n    authToken\r\n  })),\r\n\r\n  on(AuthActions.lock, (state) => ({\r\n    ...state,\r\n    authToken: undefined\r\n  })),\r\n\r\n  on(AuthActions.logout, () => initialState)\r\n);\r\n\r\nexport const getAuthToken = (state: State) => state.authToken;\r\nexport const getLoggedInUser = (state: State) => state.loggedInUser;\r\n",
            "properties": [
                {
                    "name": "authToken",
                    "type": "AuthToken",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loggedInUser",
                    "type": "UserProfile",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-1976314d5285659b5ac6bccd973e07fb-1",
            "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\n\r\nimport { HttpError } from '@app/core/exception';\r\nimport { ResetPasswordActions } from '../actions';\r\n\r\nexport const resetPasswordPageFeatureKey = 'resetPasswordPage';\r\n\r\nexport interface State {\r\n  error: HttpError | null;\r\n  pending: boolean;\r\n}\r\n\r\nexport const initialState: State = {\r\n  error: null,\r\n  pending: false,\r\n};\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n\r\n  on(ResetPasswordActions.sendResetPasswordLink, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: true,\r\n  })),\r\n\r\n  on(ResetPasswordActions.sendResetPasswordLinkSuccess, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: false,\r\n  })),\r\n\r\n  on(ResetPasswordActions.sendResetPasswordLinkFailure, (state, { error }) => ({\r\n    ...state,\r\n    error,\r\n    pending: false,\r\n  }))\r\n);\r\n\r\nexport const getError = (state: State) => state.error;\r\nexport const getPending = (state: State) => state.pending;\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "HttpError | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "pending",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-ffb8f7953e7a02a7e250d46281f0e762-2",
            "file": "src/app/auth/reducers/login-page.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\n\r\nimport { HttpError } from '@app/core/exception';\r\nimport { LoginPageActions, AuthApiActions } from '../actions';\r\n\r\nexport const loginPageFeatureKey = 'loginPage';\r\n\r\nexport interface State {\r\n  error: HttpError | null;\r\n  pending: boolean;\r\n}\r\n\r\nexport const initialState: State = {\r\n  error: null,\r\n  pending: false,\r\n};\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n\r\n  on(LoginPageActions.login, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: true,\r\n  })),\r\n\r\n  on(LoginPageActions.leavePage, state => ({\r\n    ...state,\r\n    error: null\r\n  })),\r\n\r\n  on(AuthApiActions.loginSuccess, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: false,\r\n  })),\r\n\r\n  on(AuthApiActions.loginFailure, (state, { error }) => ({\r\n    ...state,\r\n    error,\r\n    pending: false,\r\n  }))\r\n);\r\n\r\nexport const getError = (state: State) => state.error;\r\nexport const getPending = (state: State) => state.pending;\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "HttpError | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "pending",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "State",
            "id": "interface-State-dcca70120f225c196b5d55c8b8d73f3f-3",
            "file": "src/app/admin/contact/reducers/contact-detail-page.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\n\r\nimport { ContactActions } from '../actions';\r\n\r\nexport interface State {\r\n  loading: boolean;\r\n  saving: boolean;\r\n}\r\n\r\nexport const initialState: State = {\r\n  loading: false,\r\n  saving: false\r\n};\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n\r\n  on(\r\n    ContactActions.findContactById,\r\n    (state) => ({ ...state, loading: true })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.updateContact,\r\n    (state) => ({ ...state, saving: true })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.findContactByIdSuccess,\r\n    ContactActions.findContactByIdFailure,\r\n    (state) => ({ ...state, loading: false })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.updateContactSuccess,\r\n    ContactActions.updateContactFailure,\r\n    (state) => ({ ...state, saving: false })\r\n  )\r\n);\r\n",
            "properties": [
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "saving",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "State-3"
        },
        {
            "name": "State",
            "id": "interface-State-5c1a3521060503e3e5d9eb56ceb31998-4",
            "file": "src/app/admin/contact/reducers/contact.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\n\r\nimport { ContactModel } from '../models';\r\nimport { ContactActions } from '../actions';\r\n\r\nexport interface State extends EntityState<ContactModel> {\r\n}\r\n\r\nexport function sortByUsername(a: ContactModel, b: ContactModel): number {\r\n  if (!a.username || !b.username) {\r\n    return 0;\r\n  }\r\n\r\n  return a.username.localeCompare(b.username);\r\n}\r\n\r\nexport const adapter: EntityAdapter<ContactModel> = createEntityAdapter<ContactModel>({\r\n  selectId: (contact: ContactModel) => contact.id,\r\n  sortComparer: sortByUsername,\r\n});\r\n\r\nexport const initialState: State = adapter.getInitialState({});\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n\r\n  on(\r\n    ContactActions.findContactSuccess,\r\n    (state, { contacts }) => {\r\n      return adapter.addMany(contacts, state);\r\n    }\r\n  ),\r\n\r\n  on(\r\n    ContactActions.findContactByIdSuccess,\r\n    (state, { contact }) => {\r\n      return adapter.addOne(contact, state);\r\n    }\r\n  )\r\n);\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "State-4"
        },
        {
            "name": "State",
            "id": "interface-State-07da5082cc80b115c2c2a0246311c0b1-5",
            "file": "src/app/admin/contact/reducers/contact-list-page.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\n\r\nimport { ContactActions } from '../actions';\r\n\r\nexport interface State {\r\n  pending: boolean;\r\n}\r\n\r\nexport const initialState: State = {\r\n  pending: false\r\n};\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n\r\n  on(\r\n    ContactActions.findContact,\r\n    (state) => ({ ...state, pending: true })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.findContactSuccess,\r\n    ContactActions.findContactFailure,\r\n    (state) => ({ ...state, pending: false })\r\n  )\r\n);\r\n",
            "properties": [
                {
                    "name": "pending",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 5,
            "duplicateName": "State-5"
        },
        {
            "name": "UpdateContactModel",
            "id": "interface-UpdateContactModel-47d0829c58a30aa15a6303b2fe215684",
            "file": "src/app/admin/contact/models/update-contact.model.ts",
            "type": "interface",
            "sourceCode": "export interface UpdateContactModel {\r\n  id: string;\r\n  name: string;\r\n  phone: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-cd267bdbf6def57ec1098797c5bd4870",
            "file": "src/app/admin/chat/models/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  id: string;\r\n  name?: string;\r\n  avatarUrl?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatarUrl",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UserProfile",
            "id": "interface-UserProfile-4aaffdf713ca37424b2fb2b4bc0bdc7e",
            "file": "src/app/auth/models/user.model.ts",
            "type": "interface",
            "sourceCode": "export interface UserProfile {\r\n  id: string;\r\n  username: string;\r\n  avatarUrl?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatarUrl",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "WebStorageConfiguration",
            "id": "interface-WebStorageConfiguration-7c4390e4742aa73ea82e691f766d9dd7",
            "file": "src/app/core/web-storage/web-storage.config.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\r\n\r\nexport const WEB_STORAGE_CONFIGURATION = new InjectionToken<WebStorageConfiguration>\r\n  ('Web storage configuration token');\r\n\r\nexport interface WebStorageConfiguration {\r\n  /**\r\n   * Determines the key prefix. (Default: 'web_storage')\r\n   */\r\n  prefix?: string;\r\n  /**\r\n   * Determines if null | 'null' values should be stored. (Default: true)\r\n   */\r\n  allowNull?: boolean;\r\n}\r\n\r\nexport const defaultWebStorageConfig: WebStorageConfiguration = {\r\n  prefix: 'web_storage',\r\n  allowNull: true\r\n};\r\n",
            "properties": [
                {
                    "name": "allowNull",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Determines if null | &#39;null&#39; values should be stored. (Default: true)</p>\n",
                    "line": 14
                },
                {
                    "name": "prefix",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Determines the key prefix. (Default: &#39;web_storage&#39;)</p>\n",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AppErrorHandler",
            "id": "injectable-AppErrorHandler-8e6e9c225328918435c351ecd66ccc74",
            "file": "src/app/core/exception/app-error-handler.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ErrorHandler, Injectable } from '@angular/core';\r\n\r\nimport { LoggerService } from '../logger';\r\n\r\n@Injectable()\r\nexport class AppErrorHandler extends ErrorHandler {\r\n\r\n  constructor(private loggerService: LoggerService) {\r\n    super();\r\n  }\r\n\r\n  handleError(error: Error) {\r\n    super.handleError(error);\r\n\r\n    this.loggerService.captureException(error, null);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "loggerService",
                        "type": "LoggerService"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "loggerService",
                        "type": "LoggerService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ErrorHandler",
            "type": "injectable"
        },
        {
            "name": "AppSettingsEffects",
            "id": "injectable-AppSettingsEffects-9f3a618cac37e9e15ebe0f15bc2bf1f0",
            "file": "src/app/core/store/app-settings/app-settings.effect.ts",
            "properties": [
                {
                    "name": "setLanguage$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.store.pipe(\r\n        select(appSettingsSelector.selectCurrentLanguage),\r\n        distinctUntilChanged(),\r\n        tap(language => this.translateService.use(language))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { createEffect } from '@ngrx/effects';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { distinctUntilChanged, tap } from 'rxjs/operators';\r\n\r\nimport { AppState } from '../reducer';\r\nimport { appSettingsSelector } from './app-settings.selector';\r\n\r\n@Injectable()\r\nexport class AppSettingsEffects {\r\n\r\n  setLanguage$ = createEffect(\r\n    () =>\r\n      this.store.pipe(\r\n        select(appSettingsSelector.selectCurrentLanguage),\r\n        distinctUntilChanged(),\r\n        tap(language => this.translateService.use(language))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  constructor(\r\n    private store: Store<AppState>,\r\n    private translateService: TranslateService\r\n  ) { }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-46d96006d7f88d684214f01de9f57fc0",
            "file": "src/app/auth/effects/auth.effect.ts",
            "properties": [
                {
                    "name": "lock$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(AuthActions.lock),\r\n        tap(() => {\r\n          this.router.navigate(['/lock']);\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "login$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(LoginPageActions.login),\r\n      map(action => action.credential),\r\n      exhaustMap((auth: Credential) =>\r\n        this.authService.login(auth).pipe(\r\n          map(authToken => AuthApiActions.loginSuccess({ authToken })),\r\n          catchError(error => of(AuthApiActions.loginFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loginRedirect$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(AuthActions.loginRedirect, AuthActions.logout),\r\n      tap(() => {\r\n        this.router.navigate(['/login']);\r\n      })\r\n    ),\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "loginSuccess$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(AuthApiActions.loginSuccess),\r\n      tap(() => this.router.navigate(['/admin']))\r\n    ),\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "logoutConfirmation$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(AuthActions.logoutConfirmation),\r\n      exhaustMap(() => {\r\n        const dialogRef = this.dialog.open<\r\n          LogoutConfirmationDialogComponent,\r\n          undefined,\r\n          boolean\r\n        >(LogoutConfirmationDialogComponent);\r\n\r\n        return dialogRef.afterClosed();\r\n      }),\r\n      map(\r\n        result =>\r\n          result\r\n            ? AuthActions.logout()\r\n            : AuthActions.logoutConfirmationDismiss()\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\r\n\r\nimport { of } from 'rxjs';\r\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\r\n\r\nimport { Credential } from '../models';\r\nimport { AuthService } from '../services';\r\nimport { LoginPageActions, AuthApiActions, AuthActions } from '../actions';\r\nimport { LogoutConfirmationDialogComponent } from '../components';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  login$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(LoginPageActions.login),\r\n      map(action => action.credential),\r\n      exhaustMap((auth: Credential) =>\r\n        this.authService.login(auth).pipe(\r\n          map(authToken => AuthApiActions.loginSuccess({ authToken })),\r\n          catchError(error => of(AuthApiActions.loginFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loginSuccess$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(AuthApiActions.loginSuccess),\r\n      tap(() => this.router.navigate(['/admin']))\r\n    ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  loginRedirect$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(AuthActions.loginRedirect, AuthActions.logout),\r\n      tap(() => {\r\n        this.router.navigate(['/login']);\r\n      })\r\n    ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  logoutConfirmation$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(AuthActions.logoutConfirmation),\r\n      exhaustMap(() => {\r\n        const dialogRef = this.dialog.open<\r\n          LogoutConfirmationDialogComponent,\r\n          undefined,\r\n          boolean\r\n        >(LogoutConfirmationDialogComponent);\r\n\r\n        return dialogRef.afterClosed();\r\n      }),\r\n      map(\r\n        result =>\r\n          result\r\n            ? AuthActions.logout()\r\n            : AuthActions.logoutConfirmationDismiss()\r\n      )\r\n    )\r\n  );\r\n\r\n  lock$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(AuthActions.lock),\r\n        tap(() => {\r\n          this.router.navigate(['/lock']);\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private dialog: MatDialog,\r\n    private actions$: Actions,\r\n    private authService: AuthService,\r\n  ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-642cbc2bf8710e7a2a1b1a5cdcf02952",
            "file": "src/app/auth/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credential",
                            "type": "Credential"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "credential",
                            "type": "Credential",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Credential } from '../models';\r\nimport { AUTH_CONFIGURATION, AuthConfiguration } from '../auth.config';\r\n@Injectable()\r\nexport class AuthService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(AUTH_CONFIGURATION) private config: AuthConfiguration\r\n  ) { }\r\n\r\n  public login(credential: Credential): Observable<any> {\r\n    return this.http.post(this.config.loginApiURL, credential);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "config",
                        "type": "AuthConfiguration"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "AuthConfiguration",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ContactEffect",
            "id": "injectable-ContactEffect-162e53ca5ea5492c5958ac03d451c0db",
            "file": "src/app/admin/contact/effects/contact.effect.ts",
            "properties": [
                {
                    "name": "createContact$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.createContact),\r\n      map(action => action.contact),\r\n      exhaustMap((contact) =>\r\n        this.contactService.create(contact).pipe(\r\n          map((res) => ContactActions.createContactSuccess({ contact: res })),\r\n          catchError(error => of(ContactActions.createContactFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "deleteContact$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.deleteContact),\r\n      map(action => action.id),\r\n      exhaustMap((id: string) =>\r\n        this.contactService.delete(id).pipe(\r\n          map(() => ContactActions.deleteContactSuccess({ id })),\r\n          catchError(error => of(ContactActions.deleteContactFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "findContact$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.findContact),\r\n      map(action => action),\r\n      exhaustMap(() =>\r\n        this.contactService.find().pipe(\r\n          map((contacts) => ContactActions.findContactSuccess({ contacts })),\r\n          catchError(error => of(ContactActions.findContactFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "findContactById$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.findContactById),\r\n      map(action => action.id),\r\n      exhaustMap((id: string) =>\r\n        this.contactService.findById(id).pipe(\r\n          map((contact) => ContactActions.findContactByIdSuccess({ contact })),\r\n          catchError(error => of(ContactActions.findContactByIdFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "onUpdateContactSuccess$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.updateContactSuccess),\r\n      tap(() => {\r\n        this.notify.show({ message: 'Update contact success', type: 'success' });\r\n      })\r\n    ),\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "updateContact$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.updateContact),\r\n      exhaustMap(({ id, contact }) =>\r\n        this.contactService.update(id, contact).pipe(\r\n          map((res) => ContactActions.updateContactSuccess({ contact: res })),\r\n          catchError(error => of(ContactActions.updateContactFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { map, catchError, exhaustMap, tap } from 'rxjs/operators';\r\n\r\nimport { NotificationService } from '@app/shared/notification';\r\nimport { ContactActions } from '../actions';\r\nimport { ContactService } from '../services';\r\n\r\n@Injectable()\r\nexport class ContactEffect {\r\n\r\n  findContact$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.findContact),\r\n      map(action => action),\r\n      exhaustMap(() =>\r\n        this.contactService.find().pipe(\r\n          map((contacts) => ContactActions.findContactSuccess({ contacts })),\r\n          catchError(error => of(ContactActions.findContactFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  findContactById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.findContactById),\r\n      map(action => action.id),\r\n      exhaustMap((id: string) =>\r\n        this.contactService.findById(id).pipe(\r\n          map((contact) => ContactActions.findContactByIdSuccess({ contact })),\r\n          catchError(error => of(ContactActions.findContactByIdFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  createContact$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.createContact),\r\n      map(action => action.contact),\r\n      exhaustMap((contact) =>\r\n        this.contactService.create(contact).pipe(\r\n          map((res) => ContactActions.createContactSuccess({ contact: res })),\r\n          catchError(error => of(ContactActions.createContactFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  updateContact$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.updateContact),\r\n      exhaustMap(({ id, contact }) =>\r\n        this.contactService.update(id, contact).pipe(\r\n          map((res) => ContactActions.updateContactSuccess({ contact: res })),\r\n          catchError(error => of(ContactActions.updateContactFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  onUpdateContactSuccess$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.updateContactSuccess),\r\n      tap(() => {\r\n        this.notify.show({ message: 'Update contact success', type: 'success' });\r\n      })\r\n    ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  deleteContact$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ContactActions.deleteContact),\r\n      map(action => action.id),\r\n      exhaustMap((id: string) =>\r\n        this.contactService.delete(id).pipe(\r\n          map(() => ContactActions.deleteContactSuccess({ id })),\r\n          catchError(error => of(ContactActions.deleteContactFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private contactService: ContactService,\r\n    private notify: NotificationService\r\n  ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "contactService",
                        "type": "ContactService"
                    },
                    {
                        "name": "notify",
                        "type": "NotificationService"
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contactService",
                        "type": "ContactService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notify",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ContactService",
            "id": "injectable-ContactService-b20886b734dccd3c89a17f239923b0d2",
            "file": "src/app/admin/contact/services/contact.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "contact",
                            "type": "CreateContactModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "CreateContactModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "find",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "findById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ContactModel>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "update",
                            "type": "UpdateContactModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "update",
                            "type": "UpdateContactModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ContactModel, CreateContactModel, UpdateContactModel } from '../models';\r\n\r\n@Injectable()\r\nexport class ContactService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public find(): Observable<any> {\r\n    return this.http.get(`api/contacts`);\r\n  }\r\n\r\n  public findById(id: string): Observable<ContactModel> {\r\n    return this.http.get<ContactModel>(`api/contacts/${id}`);\r\n  }\r\n\r\n  public create(contact: CreateContactModel): Observable<any> {\r\n    return this.http.post(`api/contacts/`, contact);\r\n  }\r\n\r\n  public update(id: string, update: UpdateContactModel): Observable<any> {\r\n    return this.http.put(`api/contacts/${id}`, update);\r\n  }\r\n\r\n  public delete(id: string): Observable<any> {\r\n    return this.http.delete(`api/contacts/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-815797db623c62ee869212818d89a103",
            "file": "src/app/core/web-storage/local-storage.service.ts",
            "properties": [
                {
                    "name": "prefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { WEB_STORAGE_CONFIGURATION, WebStorageConfiguration } from './web-storage.config';\r\n\r\n@Injectable()\r\nexport class LocalStorageService {\r\n  private readonly prefix: string;\r\n\r\n  constructor(\r\n    @Inject(WEB_STORAGE_CONFIGURATION) config: WebStorageConfiguration\r\n  ) {\r\n    this.prefix = config.prefix;\r\n  }\r\n\r\n  get(key: string): any {\r\n    const result = localStorage.getItem(`${this.prefix}_${key}`);\r\n    if (result === undefined || result == null) {\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      return JSON.parse(result);\r\n    } catch {\r\n      return result;\r\n    }\r\n  }\r\n\r\n  set(key: string, value: any) {\r\n    localStorage.setItem(`${this.prefix}_${key}`, JSON.stringify(value));\r\n  }\r\n\r\n  remove(key: string) {\r\n    return localStorage.removeItem(`${this.prefix}_${key}`);\r\n  }\r\n\r\n  clear() {\r\n    return localStorage.clear();\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "WebStorageConfiguration"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "WebStorageConfiguration",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NetworkService",
            "id": "injectable-NetworkService-a622b38ab28d4a4630c1e587389a4b7e",
            "file": "src/app/core/network/network.service.ts",
            "properties": [
                {
                    "name": "newworkStatus",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NetworkService {\r\n\r\n  private newworkStatus: BehaviorSubject<boolean>;\r\n\r\n  public get status() {\r\n    return this.newworkStatus;\r\n  }\r\n\r\n  constructor(@Inject(PLATFORM_ID) platformId: string) {\r\n\r\n    if (isPlatformBrowser(platformId)) {\r\n      this.newworkStatus = new BehaviorSubject<boolean>(navigator.onLine);\r\n      window.addEventListener('online', () => {\r\n        this.newworkStatus.next(true);\r\n      });\r\n\r\n      window.addEventListener('offline', () => {\r\n        this.newworkStatus.next(false);\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "string"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "status": {
                    "name": "status",
                    "getSignature": {
                        "name": "status",
                        "type": "",
                        "returnType": "",
                        "line": 11
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-f6fd311eb0041688f4d43c42c45339ea",
            "file": "src/app/shared/notification/notification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "options",
                            "type": "NotificationConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "NotificationConfig",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\r\n\r\nimport { NotificationComponent } from './notification.component';\r\nimport { NotificationConfig } from './notification';\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  success() {\r\n\r\n  }\r\n\r\n  public show(options: NotificationConfig) {\r\n    const type = options.type || 'info';\r\n    const duration = options.config ? options.config.duration : -1;\r\n\r\n    let panelClass = '';\r\n    switch (options.type) {\r\n      case 'error':\r\n        panelClass = 'error-notification';\r\n        break;\r\n\r\n      case 'info':\r\n        panelClass = 'info-notification';\r\n        break;\r\n\r\n      case 'success':\r\n        panelClass = 'success-notification';\r\n        break;\r\n\r\n      case 'warn':\r\n        panelClass = 'warning-notification';\r\n        break;\r\n    }\r\n\r\n    const config: MatSnackBarConfig = {\r\n      duration: -1,\r\n      panelClass,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'bottom',\r\n      data: {\r\n        message: options.message,\r\n        title: options.title,\r\n        action: options.action,\r\n        image: options.image,\r\n        type,\r\n        duration\r\n      },\r\n      ...options.config\r\n    };\r\n\r\n    this.snackBar.openFromComponent(NotificationComponent, config);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SeoService",
            "id": "injectable-SeoService-f297b1fa2238ac63dc2164dd631e5968",
            "file": "src/app/core/seo/seo.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addMetaTag",
                    "args": [
                        {
                            "name": "tag",
                            "type": "MetaDefinition"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "tag",
                            "type": "MetaDefinition",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPageTitle",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\r\n\r\n@Injectable()\r\nexport class SeoService {\r\n\r\n  constructor(\r\n    private title: Title,\r\n    private meta: Meta\r\n  ) { }\r\n\r\n  setPageTitle(title: string) {\r\n    this.title.setTitle(title);\r\n  }\r\n\r\n  addMetaTag(tag: MetaDefinition) {\r\n    this.meta.addTag(tag);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "title",
                        "type": "Title"
                    },
                    {
                        "name": "meta",
                        "type": "Meta"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "meta",
                        "type": "Meta",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-b37de36ad1c2262e6765c9da49016e22",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo() {\r\n    return browser.get(browser.baseUrl) as Promise<any>;\r\n  }\r\n\r\n  getTitleText() {\r\n    return element(by.css('app-root h1')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthToken",
            "id": "class-AuthToken-b76a1199083c0886e2803234dac7a8b7",
            "file": "src/app/auth/models/auth-token.model.ts",
            "type": "class",
            "sourceCode": "export class AuthToken {\r\n  public static isValid(authToken: AuthToken) {\r\n    return (authToken.accessToken && !this.isExpired(authToken));\r\n  }\r\n\r\n  public static isExpired(authToken: AuthToken): boolean {\r\n    return new Date().getTime() > authToken.expiresAt;\r\n  }\r\n\r\n  expiresAt?: any;\r\n\r\n  constructor(\r\n    public accessToken: string,\r\n    public expiresIn: number,\r\n    public tokenType?: string,\r\n    public refreshToken?: string,\r\n    public idToken?: string) {\r\n    this.tokenType = this.tokenType || 'Bearer';\r\n    this.expiresAt = (this.expiresIn * 1000) + new Date().getTime();\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "accessToken",
                        "type": "string"
                    },
                    {
                        "name": "expiresIn",
                        "type": "number"
                    },
                    {
                        "name": "tokenType",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "refreshToken",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "idToken",
                        "type": "string",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "accessToken",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "expiresIn",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenType",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "refreshToken",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "idToken",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "accessToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "expiresAt",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "expiresIn",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "idToken",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refreshToken",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tokenType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isExpired",
                    "args": [
                        {
                            "name": "authToken",
                            "type": "AuthToken"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "authToken",
                            "type": "AuthToken",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "authToken",
                            "type": "AuthToken"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "authToken",
                            "type": "AuthToken",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomPreloadModulesStrategy",
            "id": "class-CustomPreloadModulesStrategy-72c6b5dea4c0caeacce48930baeb232c",
            "file": "src/app/core/router/custom-preloading.ts",
            "type": "class",
            "sourceCode": "import { PreloadingStrategy, Route } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nexport class CustomPreloadModulesStrategy implements PreloadingStrategy {\r\n  preload(route: Route, load: () => Observable<any>): Observable<any> {\r\n    return route.data && route.data.preload ? load() : of(null);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "preload",
                    "args": [
                        {
                            "name": "route",
                            "type": "Route"
                        },
                        {
                            "name": "load",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "Route",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "load",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "PreloadingStrategy"
            ]
        },
        {
            "name": "CustomRouterStateSerializer",
            "id": "class-CustomRouterStateSerializer-41d539d81a200fab0c97dec451a3528c",
            "file": "src/app/core/router/router-serializer.ts",
            "type": "class",
            "sourceCode": "import { RouterStateSerializer } from '@ngrx/router-store';\r\nimport { RouterStateSnapshot } from '@angular/router';\r\nimport { RouterStateModel } from './router.model';\r\n\r\n/**\r\n * The RouterStateSerializer takes the current RouterStateSnapshot\r\n * and returns any pertinent information needed. The snapshot contains\r\n * all information about the state of the router at the given point in time.\r\n * The entire snapshot is complex and not always needed. In this case, you only\r\n * need the URL and query parameters from the snapshot in the store. Other items could be\r\n * returned such as route parameters and static route data.\r\n */\r\n\r\nexport class CustomRouterStateSerializer implements RouterStateSerializer<RouterStateModel> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateModel {\r\n    let route = routerState.root;\r\n\r\n    while (route.firstChild) {\r\n      route = route.firstChild;\r\n    }\r\n\r\n    const {\r\n      url,\r\n      root: { queryParams },\r\n    } = routerState;\r\n    const { params } = route;\r\n\r\n    // Only return an object including the URL, params and query params\r\n    // instead of the entire snapshot\r\n    return { url, params, queryParams };\r\n  }\r\n}\r\n",
            "properties": [],
            "description": "<p>The RouterStateSerializer takes the current RouterStateSnapshot\nand returns any pertinent information needed. The snapshot contains\nall information about the state of the router at the given point in time.\nThe entire snapshot is complex and not always needed. In this case, you only\nneed the URL and query parameters from the snapshot in the store. Other items could be\nreturned such as route parameters and static route data.</p>\n",
            "rawdescription": "The RouterStateSerializer takes the current RouterStateSnapshot\r\nand returns any pertinent information needed. The snapshot contains\r\nall information about the state of the router at the given point in time.\r\nThe entire snapshot is complex and not always needed. In this case, you only\r\nneed the URL and query parameters from the snapshot in the store. Other items could be\r\nreturned such as route parameters and static route data.",
            "methods": [
                {
                    "name": "serialize",
                    "args": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot"
                        }
                    ],
                    "optional": false,
                    "returnType": "RouterStateModel",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "RouterStateSerializer"
            ]
        },
        {
            "name": "FormValidators",
            "id": "class-FormValidators-426618fdd3fd168f2e7113b2a00a9888",
            "file": "src/app/shared/validators/form-validators.ts",
            "type": "class",
            "sourceCode": "import { ValidationErrors, FormGroup } from '@angular/forms';\r\n\r\nexport class FormValidators {\r\n\r\n  /**\r\n   * Form validators\r\n   *\r\n   * @example\r\n   * this.form = this.formBuilder.group(\r\n   *   {\r\n   *     password: [null, Validators.required],\r\n   *     confirmPassword: [null, [Validators.required]]\r\n   *   },\r\n   *   {\r\n   *     validators: [FormValidators.mustMatch('password', 'confirmPassword')]\r\n   *   }\r\n   * );\r\n   *\r\n   * @param(string) controlName\r\n   * @param(string) matchingControlName\r\n   * @returns(ValidationErrors)\r\n   */\r\n  static mustMatch(controlName: string, matchingControlName: string): ValidationErrors | null {\r\n    return (formGroup: FormGroup) => {\r\n      const control = formGroup.controls[controlName];\r\n      const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n        return;\r\n      }\r\n\r\n      if (control.value !== matchingControl.value) {\r\n        matchingControl.setErrors({ mustMatch: true });\r\n      } else {\r\n        matchingControl.setErrors(null);\r\n      }\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "mustMatch",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string"
                        },
                        {
                            "name": "matchingControlName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 23,
                    "description": "<p>Form validators</p>\n",
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchingControlName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 139,
                                "end": 146,
                                "flags": 0,
                                "escapedText": "example"
                            },
                            "comment": "<p>this.form = this.formBuilder.group(\n{\npassword: [null, Validators.required],\nconfirmPassword: [null, [Validators.required]]\n},\n{\nvalidators: [FormValidators.mustMatch(&#39;password&#39;, &#39;confirmPassword&#39;)]\n}\n);</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 512,
                                "end": 519,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>(ValidationErrors)</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoggerService",
            "id": "class-LoggerService-be8046d3264c8548e816990c3092c2db",
            "file": "src/app/core/logger/logger.service.ts",
            "type": "class",
            "sourceCode": "export class LoggerService {\r\n\r\n  /**\r\n   * capture exception to logging platform\r\n   *\r\n   * @param(Error) error\r\n   * @param() context\r\n   */\r\n  captureException(error: Error, context: any) {\r\n    console.log('error: ', error);\r\n    console.log('context: ', context);\r\n    console.log('\\n');\r\n  }\r\n\r\n  /**\r\n   * capture info to logging platform\r\n   *\r\n   * @param(string) message\r\n   * @param() tags\r\n   */\r\n  captureInfo(message: string, tags: any) {\r\n    console.log('message: ', message);\r\n    console.log('tags: ', tags);\r\n    console.log('\\n');\r\n  }\r\n\r\n}\r\n",
            "properties": [],
            "description": "<p>Abstract class for logger Service\nA service tracking error and logging info\nTracking for easy fixes\nLogging for improving the quality</p>\n",
            "rawdescription": "Abstract class for logger Service\r\nA service tracking error and logging info\r\nTracking for easy fixes\r\nLogging for improving the quality",
            "methods": [
                {
                    "name": "captureException",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error"
                        },
                        {
                            "name": "context",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "description": "<p>capture exception to logging platform</p>\n",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "captureInfo",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "tags",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "description": "<p>capture info to logging platform</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tags",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "jsdoctags": [
                {
                    "pos": 162,
                    "end": 170,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 162,
                        "end": 163,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 163,
                        "end": 169,
                        "flags": 0,
                        "escapedText": "author"
                    },
                    "comment": "Luan Tran"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MultiModuleTranslateLoader",
            "id": "class-MultiModuleTranslateLoader-3165f9d1a47ecda4085ce6b2f0640c65",
            "file": "src/app/core/i18n/i18n-multi-module-loader.ts",
            "type": "class",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport * as _ from 'lodash';\r\n\r\nexport class MultiModuleTranslateLoader implements TranslateLoader {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private readonly options: {\r\n      prefix: string;\r\n      modules: Array<string>;\r\n    }\r\n  ) { }\r\n\r\n  public getTranslation(lang: string): Observable<any> {\r\n    const { prefix, modules } = this.options;\r\n\r\n    const requests = modules.map((moduleName) => {\r\n      const path = [prefix, moduleName, lang].join('/') + '.json';\r\n\r\n      return this.http.get(path);\r\n    });\r\n\r\n    return forkJoin(requests).pipe(\r\n      map(response => _.reduce(response, _.extend))\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "options",
                        "type": "literal type"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "TranslateLoader"
            ]
        },
        {
            "name": "SentryService",
            "id": "class-SentryService-0a914aa77e5f5ded7da4095e5fce35f5",
            "file": "src/app/core/logger/sentry.service.ts",
            "type": "class",
            "sourceCode": "import * as Sentry from '@sentry/browser';\r\n\r\nimport { LoggerService } from './logger.service';\r\nimport { defaultSentryConfig } from './sentry.config';\r\nimport { loggerConfig } from './logger.config';\r\n\r\n/**\r\n * A logger service implement use Sentry.io\r\n *\r\n * @link https://sentry.io\r\n * @link https://docs.sentry.io/\r\n * @author Luan Tran\r\n */\r\nexport class SentryService extends LoggerService {\r\n\r\n  constructor() {\r\n    super();\r\n    this.initSentry();\r\n  }\r\n\r\n  initSentry() {\r\n    Sentry.init({\r\n      dsn: defaultSentryConfig.dsn,\r\n      environment: defaultSentryConfig.environment,\r\n      enabled: loggerConfig.enable,\r\n      release: defaultSentryConfig.release\r\n    });\r\n  }\r\n\r\n  captureException(error: Error, context: any) {\r\n    if (!loggerConfig.enable) {\r\n      return;\r\n    }\r\n\r\n    Sentry.withScope(scope => {\r\n      scope.setContext(error.message, {\r\n        ...context,\r\n        level: Sentry.Severity.Error\r\n      });\r\n      Sentry.captureException(error);\r\n    });\r\n  }\r\n\r\n  captureInfo(message: string, tags: any) {\r\n    if (!loggerConfig.enable) {\r\n      return;\r\n    }\r\n\r\n    Sentry.captureEvent({\r\n      message,\r\n      tags,\r\n      level: Sentry.Severity.Info\r\n    });\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "properties": [],
            "description": "<p>A logger service implement use Sentry.io</p>\n",
            "rawdescription": "A logger service implement use Sentry.io",
            "methods": [
                {
                    "name": "captureException",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error"
                        },
                        {
                            "name": "context",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "captureInfo",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "tags",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tags",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSentry",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "captureException",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error"
                        },
                        {
                            "name": "context",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "description": "<p>capture exception to logging platform</p>\n",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LoggerService"
                    }
                },
                {
                    "name": "captureInfo",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "tags",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "description": "<p>capture info to logging platform</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tags",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LoggerService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "LoggerService",
            "jsdoctags": [
                {
                    "pos": 261,
                    "end": 267,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 261,
                        "end": 262,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 262,
                        "end": 266,
                        "flags": 0,
                        "escapedText": "link"
                    },
                    "comment": "https://sentry.io"
                },
                {
                    "pos": 289,
                    "end": 295,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 289,
                        "end": 290,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 290,
                        "end": 294,
                        "flags": 0,
                        "escapedText": "link"
                    },
                    "comment": "https://docs.sentry.io/"
                },
                {
                    "pos": 323,
                    "end": 331,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 323,
                        "end": 324,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 324,
                        "end": 330,
                        "flags": 0,
                        "escapedText": "author"
                    },
                    "comment": "Luan Tran"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AdminLayoutComponent",
            "id": "component-AdminLayoutComponent-1123e83fded7c46b1a873b929ffe7899",
            "file": "src/app/admin/layout/admin-layout/admin-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-layout",
            "styleUrls": [
                "./admin-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getRouteAnimation",
                    "args": [
                        {
                            "name": "outlet",
                            "type": "RouterOutlet"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "outlet",
                            "type": "RouterOutlet",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-admin-layout',\r\n  templateUrl: './admin-layout.component.html',\r\n  styleUrls: ['./admin-layout.component.scss']\r\n})\r\nexport class AdminLayoutComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  getRouteAnimation(outlet: RouterOutlet) {\r\n    return outlet && outlet.activatedRouteData && outlet.activatedRouteData.animation;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".admin-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n\r\nnav {\r\n  display: block;\r\n  width: 260px;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  z-index: 3;\r\n  outline: 0;\r\n  overflow-y: auto;\r\n}\r\n\r\nmain {\r\n  position: relative;\r\n  display: -webkit-box;\r\n  display: flex;\r\n  -webkit-box-flex: 1;\r\n  flex: 1 1 0%;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n  flex-direction: column;\r\n  margin-left: 260px;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n}\r\n\r\n.main-content {\r\n  flex: 1 1 0%;\r\n  min-height: 0;\r\n  position: relative;\r\n  display: block;\r\n  z-index: 1;\r\n}\r\n",
                    "styleUrl": "./admin-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"admin-layout admin-container\">\r\n  <nav class=\"sidenav-container\">\r\n    <app-admin-sidebar></app-admin-sidebar>\r\n  </nav>\r\n  <main>\r\n    <app-admin-toolbar></app-admin-toolbar>\r\n\r\n    <div class=\"main-content\">\r\n      <router-outlet #outlet=\"outlet\"></router-outlet>\r\n    </div>\r\n\r\n  </main>\r\n</div>\r\n"
        },
        {
            "name": "AdminSidebarComponent",
            "id": "component-AdminSidebarComponent-1e8203b385418491fa529bc429430723",
            "file": "src/app/admin/layout/sidebar/admin-sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-sidebar",
            "styleUrls": [
                "./admin-sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-admin-sidebar',\r\n  templateUrl: './admin-sidebar.component.html',\r\n  styleUrls: ['./admin-sidebar.component.scss']\r\n})\r\nexport class AdminSidebarComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  height: 100%;\r\n  width: 100%;\r\n  flex-direction: column;\r\n}\r\n\r\nmat-toolbar {\r\n  position: relative;\r\n  z-index: 4;\r\n}\r\n\r\n.spacer {\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.sidebar-top {\r\n  background-color: #1e2129;\r\n  color: #fff;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.navbar-container {\r\n  padding: 8px 0;\r\n  flex-grow: 1;\r\n  background-color: #2d323e;\r\n  color: #919bae;\r\n}\r\n\r\n.group-title {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 48px;\r\n  padding-left: 24px;\r\n  margin-top: 8px;\r\n  font-size: 12px;\r\n  text-transform: uppercase;\r\n  white-space: nowrap;\r\n  color: rgba(255, 255, 255, .5);\r\n}\r\n\r\n.nav-link {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 12px 12px 12px 24px;\r\n  border-left: 3px solid #2d323e;\r\n  position: relative;\r\n  overflow: hidden;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  color: currentColor;\r\n\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, .04);\r\n    border-left-color: #039be5;\r\n  }\r\n\r\n  &.active {\r\n    color: #fff !important;\r\n    border-left-color: #039be5;\r\n  }\r\n\r\n  .nav-link-icon {\r\n    width: 16px;\r\n    height: 16px;\r\n    margin-right: 16px;\r\n    min-width: 16px;\r\n    min-height: 16px;\r\n    line-height: 16px;\r\n    font-size: 16px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./admin-sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar class=\"mat-elevation-z2\">\r\n  <mat-toolbar-row class=\"sidebar-top\">\r\n    <span>Angular Starter</span>\r\n    <span class=\"spacer\"></span>\r\n    <div>\r\n      <!-- <button mat-icon-button>\r\n              <mat-icon>menu</mat-icon>\r\n            </button> -->\r\n    </div>\r\n\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n\r\n<div class=\"navbar-container\">\r\n\r\n\r\n\r\n  <div class=\"nav-group\">\r\n    <div class=\"group-title\">\r\n      <span class=\"hint-text\">Applications</span>\r\n    </div>\r\n\r\n    <div class=\"group-items\">\r\n      <div class=\"nav-item\">\r\n        <a class=\"nav-link\"\r\n          routerLink=\"/admin\"\r\n          routerLinkActive=\"active\"\r\n          [routerLinkActiveOptions]=\"{exact: true}\">\r\n          <mat-icon class=\"nav-link-icon\">dashboard</mat-icon>\r\n          <span>Overview</span>\r\n        </a>\r\n      </div>\r\n      <div class=\"nav-item\">\r\n        <a class=\"nav-link\"\r\n          routerLink=\"/admin/contacts\"\r\n          routerLinkActive=\"active\">\r\n          <mat-icon class=\"nav-link-icon\">account_box</mat-icon>\r\n          <span>Contacts</span>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"nav-group\">\r\n    <div class=\"group-title\">\r\n      <span>Documentation</span>\r\n    </div>\r\n\r\n    <div class=\"group-items\">\r\n      <div class=\"nav-item\">\r\n        <a class=\"nav-link\">\r\n          <mat-icon class=\"nav-link-icon\">update</mat-icon>\r\n          <span>Changelog</span>\r\n        </a>\r\n      </div>\r\n\r\n      <div class=\"nav-item\">\r\n        <a class=\"nav-link\">\r\n          <mat-icon class=\"nav-link-icon\">import_contacts</mat-icon>\r\n          <span>Getting Started</span>\r\n        </a>\r\n      </div>\r\n\r\n      <div class=\"nav-item\">\r\n        <a class=\"nav-link\">\r\n          <mat-icon class=\"nav-link-icon\">import_contacts</mat-icon>\r\n          <span>Services</span>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "AdminToolbarComponent",
            "id": "component-AdminToolbarComponent-e650e72bbd90512c060d49f8abb5a2e0",
            "file": "src/app/admin/layout/toolbar/admin-toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-toolbar",
            "styleUrls": [
                "./admin-toolbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedLanguage$",
                    "defaultValue": "this.store.pipe(select(selectCurrentLanguage))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "onLanguageSelect",
                    "args": [
                        {
                            "name": "language",
                            "type": "Language"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "Language",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLogoutClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { Language } from '@app/core/i18n';\r\nimport { AppState } from '@app/core/store';\r\nimport { appSettingsAction, selectCurrentLanguage } from '@app/core/app-settings';\r\nimport { AuthActions } from '@app/auth';\r\n\r\n@Component({\r\n  selector: 'app-admin-toolbar',\r\n  templateUrl: './admin-toolbar.component.html',\r\n  styleUrls: ['./admin-toolbar.component.scss']\r\n})\r\nexport class AdminToolbarComponent implements OnInit {\r\n\r\n  selectedLanguage$ = this.store.pipe(select(selectCurrentLanguage));\r\n\r\n  constructor(\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onLanguageSelect(language: Language) {\r\n    this.store.dispatch(appSettingsAction.changeLanguage({ language }));\r\n  }\r\n\r\n  onLogoutClicked(): void {\r\n    this.store.dispatch(AuthActions.logoutConfirmation());\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar {\r\n  position: relative;\r\n  z-index: 4;\r\n\r\n}\r\n\r\n.menu-bar {\r\n  height: 100%;\r\n\r\n\r\n  .menu-button {\r\n    height: 100%;\r\n    border-radius: 0;\r\n  }\r\n\r\n  .user-button {}\r\n}\r\n\r\n.spacer {\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.avatar {\r\n  width: 40px;\r\n  min-width: 40px;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  margin: 0 8px 0 0;\r\n  border-radius: 50%;\r\n  text-align: center;\r\n}\r\n\r\n.language-flag {\r\n  width: 16px;\r\n  min-width: 16px;\r\n  margin: 0 8px 0 0;\r\n}\r\n",
                    "styleUrl": "./admin-toolbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar class=\"mat-elevation-z2\">\r\n  <mat-toolbar-row>\r\n    <!-- <button mat-icon-button>\r\n      <mat-icon>menu</mat-icon>\r\n    </button> -->\r\n\r\n    <span class=\"spacer\"></span>\r\n\r\n    <div class=\"menu-bar\">\r\n      <button class=\"menu-button user-button\" mat-button [matMenuTriggerFor]=\"userMenu\">\r\n        <img class=\"avatar\" src=\"/assets/images/users/admin_300x300.jpg\" alt=\"\">\r\n        <span>admin@gmail.com</span>\r\n        <mat-icon>keyboard_arrow_down</mat-icon>\r\n      </button>\r\n\r\n      <mat-menu #userMenu=\"matMenu\" xPosition=\"before\">\r\n        <button mat-menu-item>\r\n          <mat-icon>account_box</mat-icon>\r\n          <span>{{ 'general.profile' | translate }}</span>\r\n        </button>\r\n\r\n        <button mat-menu-item (click)=\"onLogoutClicked()\">\r\n          <mat-icon>exit_to_app</mat-icon>\r\n          <span>{{ 'general.logout' | translate }}</span>\r\n        </button>\r\n\r\n      </mat-menu>\r\n\r\n      <button class=\"menu-button\" mat-button [matMenuTriggerFor]=\"languageMenu\">\r\n        <img class=\"language-flag\" src=\"/assets/images/flags/us.png\">\r\n        <span>{{ selectedLanguage$ | async | uppercase }}</span>\r\n      </button>\r\n\r\n      <mat-menu #languageMenu=\"matMenu\" xPosition=\"before\">\r\n        <button mat-menu-item (click)=\"onLanguageSelect('en')\">\r\n          <img class=\"language-flag\" src=\"/assets/images/flags/us.png\">\r\n          <span>English (United States)</span>\r\n        </button>\r\n\r\n        <button mat-menu-item (click)=\"onLanguageSelect('vi')\">\r\n          <img class=\"language-flag\" src=\"/assets/images/flags/vn.png\">\r\n          <span>Tiếng Việt (Việt Nam)</span>\r\n        </button>\r\n\r\n      </mat-menu>\r\n    </div>\r\n\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n"
        },
        {
            "name": "AlertDialogComponent",
            "id": "component-AlertDialogComponent-58ddba28aa1b20c5005dc21a65fe5e38",
            "file": "src/app/shared/dialog/alert-dialog/alert-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert-dialog",
            "styleUrls": [
                "./alert-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-alert-dialog',\r\n  templateUrl: './alert-dialog.component.html',\r\n  styleUrls: ['./alert-dialog.component.scss']\r\n})\r\nexport class AlertDialogComponent {\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA)\r\n    public data: { message: string; title?: string; }\r\n  ) { }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-dialog-actions {\r\n  margin-top: 16px;\r\n  justify-content: flex-end;\r\n}\r\n",
                    "styleUrl": "./alert-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 *ngIf=\"data.title\" mat-dialog-title>{{data.title}}</h2>\r\n<div mat-dialog-content>\r\n  <p>{{ data.message }}</p>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-button [mat-dialog-close]>Ok</button>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-a5fad5dc1f0c568d3f4c5380be96c2ba",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hideSplashScreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Renderer2 } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { filter, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private router: Router\r\n  ) {\r\n    this.hideSplashScreen();\r\n  }\r\n\r\n  private hideSplashScreen() {\r\n    this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      take(1)\r\n    ).subscribe(() => {\r\n      const splashScreen = document.querySelector('#splash-screen');\r\n      this.renderer.setStyle(splashScreen, 'display', 'none');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ChatBoxComponent",
            "id": "component-ChatBoxComponent-01a884bdc020ac665fe503a083abb73e",
            "file": "src/app/admin/chat/containers/chat-box/chat-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-box",
            "styleUrls": [
                "./chat-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-chat-box',\r\n  templateUrl: './chat-box.component.html',\r\n  styleUrls: ['./chat-box.component.scss']\r\n})\r\nexport class ChatBoxComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  height: 100%;\r\n  width: 100%;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n\r\n.chat-box-messages {\r\n  flex-grow: 1;\r\n  overflow: auto;\r\n  background-color: #e9eef4;\r\n  padding: 24px 0;\r\n  position: relative;\r\n}\r\n\r\n.chat-box-form {\r\n  // padding: 0 16px;\r\n  height: 96px;\r\n  // background: #cccccc;\r\n}\r\n",
                    "styleUrl": "./chat-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"chat-box-header\">\r\n  <app-chat-box-header></app-chat-box-header>\r\n</div>\r\n\r\n<div class=\"chat-box-messages\" perfectScrollbar>\r\n  <app-chat-box-messages></app-chat-box-messages>\r\n</div>\r\n\r\n<div class=\"chat-box-form\">\r\n  <app-chat-box-form></app-chat-box-form>\r\n</div>\r\n"
        },
        {
            "name": "ChatBoxFormComponent",
            "id": "component-ChatBoxFormComponent-517d6073a1f133ae46abfd48f388a14c",
            "file": "src/app/admin/chat/containers/chat-box-form/chat-box-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-box-form",
            "styleUrls": [
                "./chat-box-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-box-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-chat-box-form',\r\n  templateUrl: './chat-box-form.component.html',\r\n  styleUrls: ['./chat-box-form.component.css']\r\n})\r\nexport class ChatBoxFormComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input {\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./chat-box-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"editor\">\r\n  <!-- <input type=\"text\"> -->\r\n</div>\r\n\r\n<div>\r\n\r\n</div>"
        },
        {
            "name": "ChatBoxHeaderComponent",
            "id": "component-ChatBoxHeaderComponent-72928d59e8ef86800759f922d7b293ba",
            "file": "src/app/admin/chat/containers/chat-box-header/chat-box-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-box-header",
            "styleUrls": [
                "./chat-box-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-box-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-chat-box-header',\r\n  templateUrl: './chat-box-header.component.html',\r\n  styleUrls: ['./chat-box-header.component.scss']\r\n})\r\nexport class ChatBoxHeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".chat-toolbar {\r\n  background: #f5f5f5;\r\n  color: rgba(0, 0, 0, .87);\r\n  padding: 0 16px;\r\n  height: 56px;\r\n  border-bottom: 1px solid rgba(0, 0, 0, .12);\r\n}\r\n\r\n.avatar-wrapper {\r\n  position: relative;\r\n\r\n  .avatar {\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 50%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./chat-box-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"chat-toolbar\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n  <div class=\"contact\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"8px\">\r\n    <div class=\"avatar-wrapper\">\r\n      <img src=\"http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg\" class=\"avatar\" alt=\"\" srcset=\"\">\r\n    </div>\r\n    <div class=\"contact-name\"> Alice Freeman </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ChatBoxMessagesComponent",
            "id": "component-ChatBoxMessagesComponent-b182bdf6ad2395ca0b492d52cff8048b",
            "file": "src/app/admin/chat/containers/chat-box-messages/chat-box-messages.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-box-messages",
            "styleUrls": [
                "./chat-box-messages.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-box-messages.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "messagesGroups$",
                    "type": "Observable<Array<MessageGroup>>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { MessageGroup, MessageType } from '../../models';\r\n\r\n@Component({\r\n  selector: 'app-chat-box-messages',\r\n  templateUrl: './chat-box-messages.component.html',\r\n  styleUrls: ['./chat-box-messages.component.scss']\r\n})\r\nexport class ChatBoxMessagesComponent implements OnInit {\r\n\r\n  messagesGroups$: Observable<Array<MessageGroup>>;\r\n\r\n  constructor() {\r\n    this.messagesGroups$ = new Observable<Array<MessageGroup>>((subscriber) => {\r\n      subscriber.next([\r\n        {\r\n          sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n          createdAt: '14:40',\r\n          messages: [\r\n            {\r\n              id: '1234',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                { type: MessageType.text, content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.' }\r\n              ],\r\n              createdAt: '2017',\r\n            },\r\n            {\r\n              id: '12734',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                {\r\n                  type: MessageType.image,\r\n                  content: { url: 'https://interactive-examples.mdn.mozilla.net/media/examples/grapefruit-slice-332-332.jpg' }\r\n                }\r\n              ],\r\n              createdAt: '2017',\r\n            },\r\n            {\r\n              id: '12342',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                { type: MessageType.text, content: 'Vivamus magna justo, lacinia eget consectetur sed, convallis at tellus.' }\r\n              ],\r\n              createdAt: '2017',\r\n            },\r\n            {\r\n              id: '12334',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                { type: MessageType.text, content: 'Pellentesque in ipsum id orci porta dapibus.' }\r\n              ],\r\n              createdAt: '2017',\r\n            },\r\n            {\r\n              id: '12344',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                { type: MessageType.text, content: 'Pellentesque in ipsum id orci porta dapibus.' }\r\n              ],\r\n              createdAt: '2017',\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          sender: { id: '12345', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n          createdAt: '14:51',\r\n          messages: [\r\n            {\r\n              id: '1234',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                { type: MessageType.text, content: 'Hello' }\r\n              ],\r\n              createdAt: '2017',\r\n            },\r\n            {\r\n              id: '12734',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                { type: MessageType.text, content: 'Hello' }\r\n              ],\r\n              createdAt: '2017',\r\n            },\r\n            {\r\n              id: '123544',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                { type: MessageType.text, content: 'Pellentesque in ipsum id orci porta dapibus.' }\r\n              ],\r\n              createdAt: '2017',\r\n            },\r\n            {\r\n              id: '12342',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                { type: MessageType.text, content: 'Hello' }\r\n              ],\r\n              createdAt: '2017',\r\n            },\r\n            {\r\n              id: '12334',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                { type: MessageType.text, content: 'Hello' }\r\n              ],\r\n              createdAt: '2017',\r\n            },\r\n            {\r\n              id: '12344',\r\n              sender: { id: '1234', name: 'Hung', avatarUrl: 'http://angular-material.fusetheme.com/assets/images/avatars/alice.jpg' },\r\n              payloads: [\r\n                { type: MessageType.text, content: 'Hello' }\r\n              ],\r\n              createdAt: '14:51',\r\n            }\r\n          ]\r\n        }\r\n      ]);\r\n    });\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.messagesGroups$.subscribe(x => {\r\n      console.log(x);\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".message-group {\r\n  margin-top: 24px;\r\n  padding: 0 18px 0 12px;\r\n  max-width: 75%;\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  &:first-child {\r\n    margin-top: 0;\r\n  }\r\n\r\n  &.me {\r\n    margin-left: 25%;\r\n    text-align: right;\r\n    flex-direction: row-reverse;\r\n  }\r\n\r\n  app-chat-user-avatar {\r\n    flex-shrink: 0;\r\n    flex-basis: 42px;\r\n  }\r\n}\r\n\r\napp-chat-message {\r\n  display: block;\r\n  margin-bottom: 6px;\r\n}\r\n\r\n.date-time {\r\n  font-size: 0.75rem;\r\n  color: rgb(66, 77, 87);\r\n  margin-top: 0.5rem;\r\n}\r\n",
                    "styleUrl": "./chat-box-messages.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngFor=\"let group of messagesGroups$ | async\">\r\n  <div class=\"message-group\" [ngClass]=\"{'me': group.sender.id === '1234'}\">\r\n\r\n    <app-chat-user-avatar [avatarUrl]=\"group.sender.avatarUrl\"> </app-chat-user-avatar>\r\n\r\n    <div>\r\n      <ng-container *ngFor=\"let message of group.messages; let i = index; \">\r\n        <app-chat-message \r\n          [message]=\"message\" \r\n          [ngClass]=\"{\r\n            'first-item': i === 0, \r\n            'last-item': i === group.messages.length - 1\r\n            }\"></app-chat-message>\r\n      </ng-container>\r\n\r\n      <div class=\"date-time\">{{ group.createdAt }}</div>\r\n    </div>\r\n\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "ChatImageMessageComponent",
            "id": "component-ChatImageMessageComponent-40e27ae291de7e86647a0c3811c84d5a",
            "file": "src/app/admin/chat/components/chat-image-message/chat-image-message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-image-message",
            "styleUrls": [
                "./chat-image-message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-image-message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "line": 12,
                    "type": "ImageMessage"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\nimport { ImageMessage } from '../../models';\r\n\r\n@Component({\r\n  selector: 'app-chat-image-message',\r\n  templateUrl: './chat-image-message.component.html',\r\n  styleUrls: ['./chat-image-message.component.scss']\r\n})\r\nexport class ChatImageMessageComponent implements OnInit {\r\n\r\n  @Input() content: ImageMessage;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".image-thumb {\r\n  overflow: hidden;\r\n  display: inline-flex;\r\n\r\n  img {\r\n    border-radius: 6px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./chat-image-message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"image-thumb\">\r\n  <img src=\"{{ content.url }}\" alt=\"\">\r\n</div>\r\n"
        },
        {
            "name": "ChatMessageComponent",
            "id": "component-ChatMessageComponent-bc581ba3e0f5a1d89c34b5f957406f01",
            "file": "src/app/admin/chat/components/chat-message/chat-message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-message",
            "styleUrls": [
                "./chat-message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "line": 12,
                    "type": "Message"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\nimport { Message } from '../../models';\r\n\r\n@Component({\r\n  selector: 'app-chat-message',\r\n  templateUrl: './chat-message.component.html',\r\n  styleUrls: ['./chat-message.component.scss']\r\n})\r\nexport class ChatMessageComponent implements OnInit {\r\n\r\n  @Input() message: Message;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./chat-message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"chat-message\" *ngFor=\"let payload of message.payloads\">\r\n\r\n  <ng-container [ngSwitch]=\"payload.type\">\r\n    <ng-container *ngSwitchCase=\"'text'\">\r\n      <app-chat-text-message [content]=\"payload.content\"></app-chat-text-message>\r\n    </ng-container>\r\n\r\n    <ng-container *ngSwitchCase=\"'image'\">\r\n      <app-chat-image-message [content]=\"payload.content\"></app-chat-image-message>\r\n    </ng-container>\r\n\r\n  </ng-container>\r\n\r\n</div>\r\n"
        },
        {
            "name": "ChatPageComponent",
            "id": "component-ChatPageComponent-b9a66b51b721e9d9ad7e099458b2337f",
            "file": "src/app/admin/chat/containers/chat-page/chat-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-page",
            "styleUrls": [
                "./chat-page.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-chat-page',\r\n  templateUrl: './chat-page.component.html',\r\n  styleUrls: ['./chat-page.component.css']\r\n})\r\nexport class ChatPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".chat-page {\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./chat-page.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-layout\">\r\n  <div class=\"chat-page\" fxLayout=\"row\">\r\n    <div fxFlex=\"30%\">\r\n      Contact list\r\n    </div>\r\n\r\n    <div fxFlex=\"70%\">\r\n      <app-chat-box></app-chat-box>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ChatTextMessageComponent",
            "id": "component-ChatTextMessageComponent-52d9a43b2e254fce41ac93ab4df09f33",
            "file": "src/app/admin/chat/components/chat-text-message/chat-text-message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-text-message",
            "styleUrls": [
                "./chat-text-message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-text-message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-chat-text-message',\r\n  templateUrl: './chat-text-message.component.html',\r\n  styleUrls: ['./chat-text-message.component.scss']\r\n})\r\nexport class ChatTextMessageComponent implements OnInit {\r\n\r\n  @Input() content: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: auto;\r\n  background-color: #ffffff;\r\n  padding: 12px 16px;\r\n  border-radius: 6px;\r\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px;\r\n  color: rgb(66, 77, 87);\r\n}\r\n",
                    "styleUrl": "./chat-text-message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span>{{ content }}</span>\r\n"
        },
        {
            "name": "ConfirmDialogComponent",
            "id": "component-ConfirmDialogComponent-c7d59ea47c24a82616649110a4d87e09",
            "file": "src/app/shared/dialog/confirm-dialog/confirm-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-dialog",
            "styleUrls": [
                "./confirm-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.scss']\r\n})\r\nexport class ConfirmDialogComponent {\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA)\r\n    public data: { message: string; title?: string; }\r\n  ) {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  max-width: 480px;\r\n  min-width: 380px;\r\n}\r\n\r\nmat-dialog-content {\r\n  min-height: 72px;\r\n}\r\n\r\nmat-dialog-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n",
                    "styleUrl": "./confirm-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 *ngIf=\"data.title\" mat-dialog-title>{{ data.title }}</h2>\r\n<mat-dialog-content>{{ data.message }}</mat-dialog-content>\r\n<mat-dialog-actions>\r\n  <button class=\"btn-rounded\" mat-button [mat-dialog-close]=\"false\">Hủy</button>\r\n  <button class=\"btn-rounded\" mat-button [mat-dialog-close]=\"true\">Đồng ý</button>\r\n</mat-dialog-actions>\r\n"
        },
        {
            "name": "ContactCreatePageComponent",
            "id": "component-ContactCreatePageComponent-0d81e78dac5730507b295b7107d7218c",
            "file": "src/app/admin/contact/containers/contact-create-page/contact-create-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact-create-page",
            "styleUrls": [
                "./contact-create-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contact-create-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contactForm",
                    "type": "ContactFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "ContactFormComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "pending$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "onCreate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { CreateContactModel } from '../../models';\r\nimport { ContactState } from '../../reducers';\r\nimport { ContactActions } from '../../actions';\r\nimport { ContactFormComponent } from '../../components';\r\nimport { ContactDetailPageSelectors } from '../../selectors';\r\n\r\n@Component({\r\n  selector: 'app-contact-create-page',\r\n  templateUrl: './contact-create-page.component.html',\r\n  styleUrls: ['./contact-create-page.component.scss']\r\n})\r\nexport class ContactCreatePageComponent implements OnInit {\r\n  @ViewChild(ContactFormComponent, { static: true }) contactForm: ContactFormComponent;\r\n\r\n  pending$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private store: Store<ContactState>\r\n  ) {\r\n    this.store.pipe(select(ContactDetailPageSelectors.selectContactDetailPageSaving));\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onCreate(): void {\r\n    const contact: CreateContactModel = this.contactForm.form.value;\r\n\r\n    this.store.dispatch(ContactActions.createContact({ contact }));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".top-bg {\r\n  background-image: url('/assets/images/navigation-drawer-background-image.jpg');\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-position-y: 65%;\r\n}\r\n",
                    "styleUrl": "./contact-create-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<ContactState>"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<ContactState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-layout\">\r\n  <div class=\"top-bg accent\"></div>\r\n\r\n  <div class=\"center\">\r\n    <div class=\"page-header accent\"\r\n      fxLayout=\"row\"\r\n      fxLayoutAlign=\"space-between center\">\r\n\r\n      <div fxLayout=\"row\"\r\n        fxLayoutAlign=\"start center\"\r\n        fxLayoutGap=\"8px\">\r\n        <a mat-icon-button routerLink=\"../\">\r\n          <mat-icon>arrow_back</mat-icon>\r\n        </a>\r\n\r\n        <h1 class=\"page-title mat-headline\">Create new contact</h1>\r\n      </div>\r\n\r\n      <button mat-raised-button color=\"primary\"\r\n        [disabled]=\"(pending$ | async)\"\r\n        (click)=\"onCreate()\">\r\n        <span>{{ 'general.save' | translate }}</span>\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"page-content\" perfectScrollbar>\r\n      <app-contact-form\r\n        (save)=\"onCreate()\">\r\n      </app-contact-form>\r\n    </div>\r\n\r\n  </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "ContactDetailPageComponent",
            "id": "component-ContactDetailPageComponent-980a8f695ab64496e8bfc6293d684f4a",
            "file": "src/app/admin/contact/containers/contact-detail-page/contact-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact-detail-page",
            "styleUrls": [
                "./contact-detail-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contact-detail-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contact$",
                    "type": "Observable<ContactModel>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "contactForm",
                    "type": "ContactFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "ContactFormComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "contactId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "saving$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "onDeleteClicked",
                    "args": [
                        {
                            "name": "contact",
                            "type": "ContactModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "ContactModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nimport { takeUntilDestroy } from '@app/core/destroyable';\r\nimport { ConfirmDialogComponent } from '@app/shared/dialog';\r\nimport { ContactModel, UpdateContactModel } from '../../models';\r\nimport { ContactState } from '../../reducers';\r\nimport { ContactActions } from '../../actions';\r\nimport { ContactSelectors, ContactDetailPageSelectors } from '../../selectors';\r\nimport { ContactFormComponent } from '../../components';\r\n\r\n@Component({\r\n  selector: 'app-contact-detail-page',\r\n  templateUrl: './contact-detail-page.component.html',\r\n  styleUrls: ['./contact-detail-page.component.scss']\r\n})\r\nexport class ContactDetailPageComponent implements OnInit {\r\n  @ViewChild(ContactFormComponent, { static: true }) contactForm: ContactFormComponent;\r\n\r\n  loading$: Observable<boolean>;\r\n  saving$: Observable<boolean>;\r\n  contact$: Observable<ContactModel>;\r\n  contactId: string;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private dialog: MatDialog,\r\n    private store: Store<ContactState>\r\n  ) {\r\n    this.route.params\r\n      .pipe(\r\n        filter(params => !!params && !!params.id),\r\n        takeUntilDestroy(this)\r\n      )\r\n      .subscribe(params => {\r\n        this.contactId = params.id;\r\n        this.store.dispatch(ContactActions.findContactById({ id: this.contactId }));\r\n        this.contact$ = this.store.pipe(select(ContactSelectors.selectContactById(this.contactId)));\r\n      });\r\n\r\n    this.loading$ = this.store.pipe(select(ContactDetailPageSelectors.selectContactDetailPageLoading));\r\n    this.saving$ = this.store.pipe(select(ContactDetailPageSelectors.selectContactDetailPageSaving));\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onDeleteClicked(contact: ContactModel) {\r\n    let name = contact.name;\r\n    if (name.length > 15) {\r\n      name = name.substr(0, 15) + '...';\r\n    }\r\n\r\n    this.dialog.open(ConfirmDialogComponent, {\r\n      data: {\r\n        title: 'Please confirm!',\r\n        message: `Are you sure you want to delete \"${name}\"?`\r\n      }\r\n    }).afterClosed()\r\n      .subscribe(confirm => {\r\n        if (confirm) {\r\n          this.store.dispatch(ContactActions.deleteContact({ id: this.contactId }));\r\n        }\r\n      });\r\n  }\r\n\r\n  onUpdate(): void {\r\n    const contact: UpdateContactModel = this.contactForm.form.value;\r\n    this.store.dispatch(ContactActions.updateContact({ id: this.contactId, contact }));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".top-bg {\r\n  background-image: url('/assets/images/navigation-drawer-background-image.jpg');\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-position-y: 65%;\r\n}\r\n",
                    "styleUrl": "./contact-detail-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "store",
                        "type": "Store<ContactState>"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<ContactState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-layout\">\r\n  <div class=\"top-bg accent\"></div>\r\n\r\n  <div class=\"center\">\r\n    <div class=\"page-header accent\"\r\n      *ngIf=\"contact$ | async as contact\"\r\n      fxLayout=\"row\"\r\n      fxLayoutAlign=\"space-between center\">\r\n\r\n      <div fxLayout=\"row\"\r\n        fxLayoutAlign=\"start center\"\r\n        fxLayoutGap=\"8px\">\r\n        <a mat-icon-button routerLink=\"../\">\r\n          <mat-icon>arrow_back</mat-icon>\r\n        </a>\r\n\r\n        <h1 class=\"page-title mat-headline\">{{ contact.name }}</h1>\r\n      </div>\r\n\r\n      <div fxLayout=\"row\"\r\n        fxLayoutAlign=\"start center\"\r\n        fxLayoutGap=\"8px\">\r\n        <button mat-raised-button color=\"primary\"\r\n          *ngIf=\"contactForm.dirty\"\r\n          (click)=\"onUpdate()\"\r\n          [disabled]=\"(saving$ | async) || contactForm.invalid || !contactForm.dirty\">\r\n          <span>{{ 'general.saveChange' | translate }}</span>\r\n        </button>\r\n        <button mat-raised-button color=\"warn\" (click)=\"onDeleteClicked(contact)\">\r\n          <span>{{ 'general.delete' | translate }}</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"page-content\" perfectScrollbar>\r\n      <app-contact-form\r\n        [contact]=\"contact$ | async\">\r\n      </app-contact-form>\r\n    </div>\r\n\r\n  </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "ContactFormComponent",
            "id": "component-ContactFormComponent-86ce5994a26ec727d8a1c055e796ec9d",
            "file": "src/app/admin/contact/components/contact-form/contact-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact-form",
            "styleUrls": [
                "./contact-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contact-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "contact",
                    "line": 13,
                    "type": "ContactModel"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "buildForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "onFormValuesChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "updateFormValue",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "ContactModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "ContactModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, SimpleChanges, Input, OnChanges } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { ContactModel } from '../../models';\r\nimport { takeUntilDestroy } from '@app/core/destroyable';\r\n\r\n@Component({\r\n  selector: 'app-contact-form',\r\n  templateUrl: './contact-form.component.html',\r\n  styleUrls: ['./contact-form.component.scss']\r\n})\r\nexport class ContactFormComponent implements OnInit, OnChanges {\r\n  @Input() contact: ContactModel;\r\n  @Output() valueChange = new EventEmitter();\r\n\r\n  get invalid(): boolean {\r\n    return this.form.invalid;\r\n  }\r\n  get dirty(): boolean {\r\n    return this.form.dirty;\r\n  }\r\n  form: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n  ) {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.contact && this.contact) {\r\n      this.updateFormValue(this.contact);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = this.formBuilder.group({\r\n      username: [null, Validators.required],\r\n      email: [null, [Validators.required, Validators.email]],\r\n      name: [null, Validators.required],\r\n      phone: [null, Validators.required],\r\n      website: [null],\r\n      address: this.formBuilder.group({\r\n        street: [null],\r\n        suite: [null],\r\n        city: [null]\r\n      })\r\n    });\r\n\r\n    this.form.valueChanges.pipe(\r\n      takeUntilDestroy(this)\r\n    ).subscribe(() => {\r\n      this.onFormValuesChanged();\r\n    });\r\n  }\r\n\r\n  private updateFormValue(newValue: ContactModel): void {\r\n    this.form.patchValue(newValue);\r\n  }\r\n\r\n  private onFormValuesChanged() {\r\n    this.valueChange.emit({\r\n      valid: this.form.valid,\r\n      value: this.form.value\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-form-field{\r\n  display: block;\r\n}\r\n",
                    "styleUrl": "./contact-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "invalid": {
                    "name": "invalid",
                    "getSignature": {
                        "name": "invalid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 16
                    }
                },
                "dirty": {
                    "name": "dirty",
                    "getSignature": {
                        "name": "dirty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 19
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\">\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Username</mat-label>\r\n    <input matInput type=\"text\" formControlName=\"username\" />\r\n    <mat-error></mat-error>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Email</mat-label>\r\n    <input matInput type=\"text\" formControlName=\"email\" />\r\n    <mat-error></mat-error>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Name</mat-label>\r\n    <input matInput type=\"text\" formControlName=\"name\" />\r\n    <mat-error></mat-error>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Phone number</mat-label>\r\n    <input matInput type=\"text\" formControlName=\"phone\" />\r\n    <mat-error></mat-error>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Website</mat-label>\r\n    <input matInput type=\"text\" formControlName=\"website\" />\r\n    <mat-error></mat-error>\r\n  </mat-form-field>\r\n\r\n  <div formGroupName=\"address\">\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Street</mat-label>\r\n      <input matInput type=\"text\" formControlName=\"street\" />\r\n      <mat-error></mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>City</mat-label>\r\n      <input matInput type=\"text\" formControlName=\"city\" />\r\n      <mat-error></mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "ContactListPageComponent",
            "id": "component-ContactListPageComponent-e2cefe3d98f6d85359181dce6ca5b614",
            "file": "src/app/admin/contact/containers/contact-list-page/contact-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact-list-page",
            "styleUrls": [
                "./contact-list-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contact-list-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contacts$",
                    "type": "Observable<Array<ContactModel>>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "contactTable",
                    "type": "ContactTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contactTable'"
                        }
                    ]
                },
                {
                    "name": "isShowActions",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "notEmpty$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "pending$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedContacts",
                    "defaultValue": "[]",
                    "type": "Array<ContactModel>",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "deSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "onDeleteSelectedContacts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "name": "contacts",
                            "type": "Array<ContactModel>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "contacts",
                            "type": "Array<ContactModel>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectRow",
                    "args": [
                        {
                            "name": "contact",
                            "type": "ContactModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "ContactModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfirmDialogComponent } from '@app/shared/dialog';\r\nimport { ContactModel } from '../../models';\r\nimport { ContactState } from '../../reducers';\r\nimport { ContactActions } from '../../actions';\r\nimport { ContactSelectors, ContactListPageSelectors } from '../../selectors';\r\nimport { ContactTableComponent } from '../../components';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-contact-list-page',\r\n  templateUrl: './contact-list-page.component.html',\r\n  styleUrls: ['./contact-list-page.component.scss']\r\n})\r\nexport class ContactListPageComponent implements OnInit {\r\n  @ViewChild('contactTable') contactTable: ContactTableComponent;\r\n\r\n  pending$: Observable<boolean>;\r\n  notEmpty$: Observable<boolean>;\r\n  contacts$: Observable<Array<ContactModel>>;\r\n\r\n  selectedContacts: Array<ContactModel> = [];\r\n  isShowActions = false;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private store: Store<ContactState>,\r\n    private dialog: MatDialog\r\n  ) {\r\n    this.contacts$ = this.store.pipe(select(ContactSelectors.selectAllContacts));\r\n    this.pending$ = this.store.pipe(select(ContactListPageSelectors.selectContactListPagePending));\r\n    this.notEmpty$ = this.contacts$.pipe(map(contacts => !!contacts && contacts.length > 0));\r\n\r\n    this.store.dispatch(ContactActions.findContact({ query: {} }));\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onSelectionChange(contacts: Array<ContactModel>) {\r\n    this.selectedContacts = contacts;\r\n    this.isShowActions = contacts.length > 0;\r\n  }\r\n\r\n  onDeleteSelectedContacts() {\r\n    this.dialog.open(ConfirmDialogComponent, {\r\n      data: {\r\n        title: 'Confirm',\r\n        message: 'Are you sure you want to delete all selected contacts?'\r\n      }\r\n    });\r\n  }\r\n\r\n  onSelectRow(contact: ContactModel) {\r\n    this.router.navigate([contact.id], { relativeTo: this.route });\r\n  }\r\n\r\n  deSelectAll() {\r\n    this.contactTable.deSelectAll();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".actions-bar {\r\n  background: transparent;\r\n  position: absolute;\r\n  z-index: 4;\r\n  padding: 0 24px;\r\n  height: 98px;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0px;\r\n  color: #ffffff;\r\n  opacity: 0;\r\n  transform: translateY(-98px);\r\n  transition: all 0.5s ease-in-out;\r\n}\r\n\r\n.page-header {\r\n  transform: translateY(0);\r\n  opacity: 1;\r\n  transition: all 0.5s ease-in-out;\r\n}\r\n\r\n.show-actions-bar {\r\n  .actions-bar {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n\r\n  .page-header {\r\n    opacity: 0;\r\n    transform: translateY(98px);\r\n  }\r\n}\r\n\r\n.top-bg {\r\n  background-image: url('/assets/images/navigation-drawer-background-image.jpg');\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-position-y: 65%;\r\n}\r\n\r\n.loading,\r\n.no-result {\r\n  margin-top: 100px;\r\n}\r\n",
                    "styleUrl": "./contact-list-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<ContactState>"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<ContactState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-layout\" [ngClass]=\"{'show-actions-bar': isShowActions}\">\r\n  <div class=\"top-bg accent\"></div>\r\n\r\n  <div class=\"actions-bar\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"8px\">\r\n      <button mat-icon-button (click)=\"deSelectAll()\">\r\n        <mat-icon>arrow_back</mat-icon>\r\n      </button>\r\n      <span>\r\n        {{selectedContacts.length}} Item<span *ngIf=\"selectedContacts.length > 1\">s</span> selected\r\n      </span>\r\n    </div>\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"8px\">\r\n      <button mat-raised-button (click)=\"onDeleteSelectedContacts()\">\r\n        {{ 'general.delete' | translate }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"center\">\r\n    <div class=\"page-header accent\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n\r\n      <h1 class=\"page-title mat-headline\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"8px\">\r\n        <mat-icon>account_box</mat-icon>\r\n        <span>{{ 'contact.contactList.pageTitle' | translate }}</span>\r\n      </h1>\r\n\r\n      <a mat-raised-button routerLink=\"./create\">\r\n        <span>{{ 'general.addNew' | translate }}</span>\r\n      </a>\r\n    </div>\r\n\r\n    <div class=\"page-content no-padding\" perfectScrollbar>\r\n\r\n      <ng-container\r\n        *ngIf=\"notEmpty$ | async; else lonelyHere\">\r\n\r\n        <app-contact-table\r\n          #contactTable\r\n          [data]=\"contacts$ | async\"\r\n          (selectRow)=\"onSelectRow($event)\"\r\n          (selectionChange)=\"onSelectionChange($event)\">\r\n        </app-contact-table>\r\n\r\n      </ng-container>\r\n\r\n      <ng-template #lonelyHere>\r\n        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n          <div class=\"loading\" fxLayout=\"column\" fxLayoutAlign=\"center center\"\r\n            *ngIf=\"pending$ | async; else empty\" >\r\n             <mat-spinner diameter=\"40\"></mat-spinner>\r\n             <p>Fetching data</p>\r\n          </div>\r\n\r\n           <ng-template #empty>\r\n             <div class=\"no-result\">\r\n              No Contact\r\n             </div>\r\n           </ng-template>\r\n        </div>\r\n      </ng-template>\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "ContactTableComponent",
            "id": "component-ContactTableComponent-f812363790d036fd77520b0b7de096e8",
            "file": "src/app/admin/contact/components/contact-table/contact-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact-table",
            "styleUrls": [
                "./contact-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contact-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 15,
                    "type": "Array<ContactModel>"
                }
            ],
            "outputsClass": [
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<ContactModel>"
                },
                {
                    "name": "disable",
                    "defaultValue": "new EventEmitter()",
                    "line": 20,
                    "type": "EventEmitter<ContactModel>"
                },
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<Array<ContactModel>>"
                },
                {
                    "name": "selectRow",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter<ContactModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "type": "MatTableDataSource<ContactModel>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['select', 'username', 'name', 'email', 'phone', 'actions']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selection",
                    "defaultValue": "new SelectionModel<ContactModel>(true, [])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "deSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "isAllSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "masterToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "onDeleteClicked",
                    "args": [
                        {
                            "name": "contact",
                            "type": "ContactModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "ContactModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDisableClicked",
                    "args": [
                        {
                            "name": "contact",
                            "type": "ContactModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "ContactModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRowClicked",
                    "args": [
                        {
                            "name": "row",
                            "type": "ContactModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "ContactModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectionRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "ContactModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "ContactModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnChanges, Input, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\nimport { ConfirmDialogComponent } from '@app/shared/dialog';\r\nimport { ContactModel } from '../../models';\r\n\r\n@Component({\r\n  selector: 'app-contact-table',\r\n  templateUrl: './contact-table.component.html',\r\n  styleUrls: ['./contact-table.component.scss']\r\n})\r\nexport class ContactTableComponent implements OnInit, OnChanges {\r\n  @Input() data: Array<ContactModel>;\r\n\r\n  @Output() selectRow: EventEmitter<ContactModel> = new EventEmitter();\r\n  @Output() selectionChange: EventEmitter<Array<ContactModel>> = new EventEmitter();\r\n  @Output() delete: EventEmitter<ContactModel> = new EventEmitter();\r\n  @Output() disable: EventEmitter<ContactModel> = new EventEmitter();\r\n\r\n  dataSource: MatTableDataSource<ContactModel>;\r\n  displayedColumns = ['select', 'username', 'name', 'email', 'phone', 'actions'];\r\n  selection = new SelectionModel<ContactModel>(true, []);\r\n\r\n  constructor(private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.data && this.data) {\r\n      this.dataSource = new MatTableDataSource(this.data);\r\n    }\r\n  }\r\n\r\n  onRowClicked(row: ContactModel) {\r\n    this.selectRow.emit(row);\r\n  }\r\n\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  masterToggle() {\r\n    if (this.isAllSelected()) {\r\n      this.selection.clear();\r\n    } else {\r\n      this.dataSource.data.forEach(row => this.selection.select(row));\r\n    }\r\n\r\n    this.selectionChange.emit(this.selection.selected);\r\n  }\r\n\r\n  toggleSelectionRow(row: ContactModel): void {\r\n    this.selection.toggle(row);\r\n    this.selectionChange.emit(this.selection.selected);\r\n  }\r\n\r\n  deSelectAll() {\r\n    this.selection.clear();\r\n    this.selectionChange.emit(this.selection.selected);\r\n  }\r\n\r\n  onDeleteClicked(contact: ContactModel) {\r\n    this.dialog.open(ConfirmDialogComponent, {\r\n      data: {\r\n        title: 'Confirm',\r\n        message: 'Are you sure you want to delete?'\r\n      }\r\n    }).afterClosed()\r\n      .subscribe(confirm => {\r\n        if (confirm) {\r\n          this.delete.emit(contact);\r\n        }\r\n      });\r\n  }\r\n\r\n  onDisableClicked(contact: ContactModel) {\r\n    this.dialog.open(ConfirmDialogComponent, {\r\n      data: {\r\n        title: 'Confirm',\r\n        message: 'Are you sure you want to delete?'\r\n      }\r\n    }).afterClosed()\r\n      .subscribe(confirm => {\r\n        if (confirm) {\r\n          this.disable.emit(contact);\r\n        }\r\n      });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table {\r\n  width: 100%;\r\n}\r\n\r\n.mat-row:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.select-col {\r\n  min-width: 60px;\r\n}\r\n",
                    "styleUrl": "./contact-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<table mat-table [dataSource]=\"dataSource\">\r\n\r\n  <ng-container matColumnDef=\"select\">\r\n    <th mat-header-cell *matHeaderCellDef class=\"select-col\">\r\n      <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n      </mat-checkbox>\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let row\">\r\n      <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                    (change)=\"$event ? toggleSelectionRow(row) : null\"\r\n                    [checked]=\"selection.isSelected(row)\">\r\n      </mat-checkbox>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"username\">\r\n    <th mat-header-cell *matHeaderCellDef> Username </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.username}} </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"name\">\r\n    <th mat-header-cell *matHeaderCellDef> Name </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{ element.name }} </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"email\">\r\n    <th mat-header-cell *matHeaderCellDef> Email </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.email}} </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"phone\">\r\n    <th mat-header-cell *matHeaderCellDef> Phone </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{ element.phone }} </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"actions\">\r\n    <th mat-header-cell *matHeaderCellDef>  </th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"menu\" (click)=\"$event.stopPropagation()\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n      <mat-menu #menu=\"matMenu\">\r\n        <button mat-menu-item (click)=\"onDeleteClicked(element)\">\r\n          <mat-icon>delete_outline</mat-icon>\r\n          <span>Delete</span>\r\n        </button>\r\n        <button mat-menu-item (click)=\"onDisableClicked(element)\">\r\n          <mat-icon>delete_outline</mat-icon>\r\n          <span>Disable</span>\r\n        </button>\r\n      </mat-menu>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"\r\n    [ngClass]=\"{'selected': selection.isSelected(row)}\"\r\n    (click)=\"onRowClicked(row)\"></tr>\r\n</table>\r\n"
        },
        {
            "name": "DashboardPageComponent",
            "id": "component-DashboardPageComponent-e5342d6715070d9a07aafd7067871470",
            "file": "src/app/admin/dashboard/containers/dashboard-page/dashboard-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-page",
            "styleUrls": [
                "./dashboard-page.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard-page',\r\n  templateUrl: './dashboard-page.component.html',\r\n  styleUrls: ['./dashboard-page.component.css']\r\n})\r\nexport class DashboardPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard-page.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>dashboard-page works!</p>\r\n"
        },
        {
            "name": "ForgotPasswordFromComponent",
            "id": "component-ForgotPasswordFromComponent-9a9347baf5e73187497fbde9dd06b2b6",
            "file": "src/app/auth/components/forgot-password-from/forgot-password-from.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password-from",
            "styleUrls": [
                "./forgot-password-from.component.scss",
                "../auth-from.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password-from.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pending",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "resetPassword",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "emailControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password-from',\r\n  templateUrl: './forgot-password-from.component.html',\r\n  styleUrls: ['./forgot-password-from.component.scss', '../auth-from.scss']\r\n})\r\nexport class ForgotPasswordFromComponent {\r\n  @Input() pending: boolean;\r\n\r\n  @Output() resetPassword: EventEmitter<string> = new EventEmitter();\r\n\r\n  form: FormGroup;\r\n  emailControl: FormControl;\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n    this.emailControl = new FormControl('', [Validators.required, Validators.email]);\r\n\r\n    this.form = this.formBuilder.group({\r\n      email: this.emailControl\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.resetPassword.emit(this.emailControl.value);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forgot-password-from.component.scss"
                },
                {
                    "data": "mat-form-field {\r\n  width: 100%;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.action-button {\r\n  margin-top: 24px;\r\n}\r\n",
                    "styleUrl": "../auth-from.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form name=\"recoverYourPasswordForm\"\r\n  autocomplete=\"off\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"onSubmit()\">\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>{{ 'auth.label.email' | translate }}</mat-label>\r\n    <input matInput\r\n      autocomplete=\"off\"\r\n      tabindex=\"1\"\r\n      type=\"email\"\r\n      formControlName=\"email\"\r\n      placeholder=\"{{ 'auth.label.email' | translate }}\" />\r\n    <mat-icon matSuffix>email</mat-icon>\r\n    <mat-error *ngIf=\"emailControl.errors\">\r\n      <span *ngIf=\"emailControl.errors['required']\">\r\n        {{ 'auth.error.email.required' | translate }}\r\n      </span>\r\n      <span *ngIf=\"emailControl.errors['email']\">\r\n        {{ 'auth.error.email.invalid' | translate }}\r\n      </span>\r\n    </mat-error>\r\n  </mat-form-field>\r\n\r\n  <div>\r\n    <span fxFlex></span>\r\n    <button mat-raised-button\r\n      tabindex=\"2\"\r\n      color=\"accent\"\r\n      type=\"submit\"\r\n      class=\"action-button w-100\"\r\n      [disabled]=\"form.invalid || pending\">\r\n      {{ 'auth.button.sendResetLink' | translate }}\r\n    </button>\r\n  </div>\r\n\r\n</form>\r\n\r\n<div class=\"text-center mt-32\">\r\n  <a [routerLink]=\"[ '/login' ]\">Back to login</a>\r\n</div>\r\n"
        },
        {
            "name": "ForgotPasswordPageComponent",
            "id": "component-ForgotPasswordPageComponent-9d9a737d35a4f985e4c9842fba993dec",
            "file": "src/app/auth/containers/forgot-password-page/forgot-password-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password-page",
            "styleUrls": [
                "./forgot-password-page.component.scss",
                "../auth-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "pending$",
                    "defaultValue": "this.store.pipe(select(ResetPasswordSelectors.selectResetPasswordPagePending))",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "onResetPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AuthState } from '../../reducers';\r\nimport { ResetPasswordActions } from '../../actions';\r\nimport { ResetPasswordSelectors } from '../../selectors';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password-page',\r\n  templateUrl: './forgot-password-page.component.html',\r\n  styleUrls: ['./forgot-password-page.component.scss', '../auth-page.scss']\r\n})\r\nexport class ForgotPasswordPageComponent {\r\n  pending$: Observable<boolean> = this.store.pipe(select(ResetPasswordSelectors.selectResetPasswordPagePending));\r\n\r\n  constructor(\r\n    private store: Store<AuthState>\r\n  ) { }\r\n\r\n  onResetPassword(email: string): void {\r\n    this.store.dispatch(ResetPasswordActions.sendResetPasswordLink({ email }));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forgot-password-page.component.scss"
                },
                {
                    "data": ".auth-page {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: url('/assets/images/background_1.jpg');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.form {\r\n  display: block;\r\n  margin-top: 40px;\r\n}\r\n\r\n.auth-card {\r\n  width: 420px;\r\n  padding: 32px;\r\n  padding-bottom: 48px;\r\n}\r\n\r\nmat-progress-bar {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n}\r\n",
                    "styleUrl": "../auth-page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"auth-page\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n  <mat-card class=\"auth-card\">\r\n    <mat-progress-bar mode=\"indeterminate\"\r\n      *ngIf=\"pending$ | async\"></mat-progress-bar>\r\n\r\n    <mat-card-content>\r\n\r\n      <h1 class=\"mat-h1\">{{ 'auth.pageTitle.forgotPassword' | translate }}</h1>\r\n\r\n      <app-forgot-password-from\r\n        class=\"form\"\r\n        [pending]=\"false\"\r\n        (resetPassword)=\"onResetPassword($event)\">\r\n      </app-forgot-password-from>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-c2e36604f92bb73c0ef40d39503134c6",
            "file": "src/app/home/containers/home-page/home-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-page",
            "styleUrls": [
                "./home-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loggedIn$",
                    "defaultValue": "this.store.pipe(select(AuthSelectors.selectIsAuthenticated))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { AppState } from '@app/core/store';\r\nimport { AuthSelectors } from '@app/auth';\r\n\r\n@Component({\r\n  selector: 'app-home-page',\r\n  templateUrl: './home-page.component.html',\r\n  styleUrls: ['./home-page.component.scss']\r\n})\r\nexport class HomePageComponent {\r\n\r\n  loggedIn$ = this.store.pipe(select(AuthSelectors.selectIsAuthenticated));\r\n\r\n  constructor(\r\n    private store: Store<AppState>\r\n  ) {\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".spacer {\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.header-bg {\r\n  background-color: #195190;\r\n  height: 800px;\r\n  z-index: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n}\r\n\r\nnav {\r\n  height: 120px;\r\n  color: #fff;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.logo {\r\n  height: 54px;\r\n}\r\n\r\n.intro {\r\n  text-align: center;\r\n  color: #fff;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.intro .leading {\r\n  font-size: 6rem;\r\n  font-weight: 200;\r\n  margin: 0;\r\n  margin-bottom: 2.5rem;\r\n}\r\n\r\n.intro p {\r\n  margin-bottom: 6rem;\r\n  font-size: 24px;\r\n  color: #fff;\r\n}\r\n\r\n.intro .img {\r\n  width: 720px;\r\n  max-width: 100%;\r\n  margin: auto;\r\n  border-radius: 5px;\r\n}\r\n\r\n.container {\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  max-width: 1200px;\r\n}\r\n\r\n.section-title {\r\n  font-size: 44px;\r\n  font-weight: 400;\r\n  color: rgba(0, 0, 0, 0.8);\r\n}\r\n\r\n.section-content {\r\n  max-width: 80%;\r\n\r\n  &.right {\r\n    margin-left: auto;\r\n  }\r\n\r\n  &.left {\r\n    margin-right: auto;\r\n  }\r\n}\r\n\r\nsection {\r\n  padding: 6rem 0;\r\n\r\n  .section-decs {\r\n    color: rgba(0, 0, 0, 0.54);\r\n    font-size: 18px;\r\n    line-height: 28px;\r\n  }\r\n}\r\n\r\n\r\n.features {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  margin-top: 24px;\r\n\r\n  .feature-item {\r\n    flex-basis: 33.33333%;\r\n    padding: 24px 16px;\r\n\r\n    mat-icon {\r\n      font-size: 32px;\r\n    }\r\n\r\n    .title {\r\n      color: rgba(0, 0, 0, 0.87);\r\n    }\r\n\r\n    .decs {\r\n      color: rgba(0, 0, 0, 0.6);\r\n    }\r\n  }\r\n\r\n  mat-card {\r\n    height: 100%;\r\n    min-height: 200px;\r\n    padding: 24px;\r\n  }\r\n}\r\n\r\n.get-started {\r\n  padding: 3rem 0;\r\n  background-color: #195190;\r\n  color: #ffffff;\r\n}\r\n",
                    "styleUrl": "./home-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"header-bg\"></div>\r\n<nav fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n  <div class=\"container\" fxLayout=\"row\">\r\n    <img class=\"logo\" src=\"assets/images/logo.svg\" alt=\"logo\" srcset=\"\">\r\n\r\n    <span class=\"spacer\"></span>\r\n\r\n    <div>\r\n      <ng-container *ngIf=\"loggedIn$ | async; else loginBlock\">\r\n        <button mat-button routerLink=\"admin\">Dashboard</button>\r\n      </ng-container>\r\n      <ng-template #loginBlock>\r\n        <button mat-button routerLink=\"login\">Login</button>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n<section class=\"intro\">\r\n  <div class=\"container\">\r\n    <h1 class=\"leading\">Angular Stater</h1>\r\n    <p>A complete Angular 8, NgRx, Angular CLI & Angular Material starter project</p>\r\n    <div class=\"img\">\r\n      <img src=\"assets/images/contact-page.png\" alt=\"\" srcset=\"\">\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n<section>\r\n  <div class=\"container\" fxLayout=\"row\">\r\n    <div fxFlex=\"50%\">\r\n      <div class=\"section-content\">\r\n        <h2 class=\"section-title\">A great Angular starter</h2>\r\n        <p class=\"section-decs\">\r\n          With the included apps and pages, Angular NgRx Material starter is a great kick-starter for your next project.\r\n          Don’t lose any time\r\n          trying\r\n          to design or structure your pages, pick one and start coding your logic right away!\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div fxFlex=\"50%\">\r\n      <img src=\"assets/images/contact-page.png\" alt=\"\" srcset=\"\">\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n<section>\r\n  <div class=\"container\" fxLayout=\"row\">\r\n    <div fxFlex=\"50%\">\r\n      <img src=\"assets/images/clean-code.png\" alt=\"\" srcset=\"\">\r\n    </div>\r\n    <div fxFlex=\"50%\">\r\n      <div class=\"section-content right\">\r\n        <h2 class=\"section-title\">Clean code</h2>\r\n        <p class=\"section-decs\">With well clean code, whether a beginner or a seasoned Angular developer, you will\r\n          find something interesting.</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n<section>\r\n  <div class=\"container\" fxLayout=\"row\">\r\n    <div fxFlex=\"50%\">\r\n      <div class=\"section-content\">\r\n        <h2 class=\"section-title\">Ready to use</h2>\r\n        <p class=\"section-decs\">Ready-to-use page layouts making it extremely easy to\r\n          switch out individual page designs or creating a new one. It also makes your pages consistent across your app.\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <div fxFlex=\"50%\">\r\n      <img src=\"assets/images/contact-page.png\" alt=\"\" srcset=\"\">\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n<section>\r\n  <div class=\"container\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\r\n    <div class=\"section-content text-center\">\r\n      <h2 class=\"section-title\">Other <strong>Features</strong></h2>\r\n      <p class=\"section-decs\">\r\n        With the included apps and pages, Angular NgRx Material starter is a great kick-starter for your next project.\r\n        Don’t lose any time\r\n        trying\r\n        to design or structure your pages, pick one and start coding your logic right away!\r\n      </p>\r\n    </div>\r\n\r\n    <div class=\"features\">\r\n      <div class=\"feature-item\">\r\n        <mat-card>\r\n          <mat-icon>color_lens</mat-icon>\r\n          <div class=\"title mat-subheading-2\">Flexible theming </div>\r\n          <p class=\"decs mat-body\">\r\n            Nulla porttitor accumsan tincidunt. Mauris blandit aliquet elit\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n\r\n      <div class=\"feature-item\">\r\n        <mat-card>\r\n          <mat-icon>language</mat-icon>\r\n          <div class=\"title mat-subheading-2\">I18n</div>\r\n          <p class=\"decs mat-body\">\r\n            Nulla porttitor accumsan tincidunt. Mauris blandit aliquet elit.\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n\r\n      <div class=\"feature-item\">\r\n        <mat-card>\r\n          <mat-icon>code</mat-icon>\r\n          <div class=\"title mat-subheading-2\">Clean Structure</div>\r\n          <p class=\"decs mat-body\">\r\n            Nulla porttitor accumsan tincidunt. Mauris blandit aliquet elit\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n\r\n      <div class=\"feature-item\">\r\n        <mat-card>\r\n          <mat-icon>attach_money</mat-icon>\r\n          <div class=\"title mat-subheading-2\">Free</div>\r\n          <p class=\"decs mat-body\">\r\n            Nulla porttitor accumsan tincidunt. Mauris blandit aliquet elit, eget tincidunt nibh pulvinar a. Sed\r\n            porttitor lectus nibh.\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n\r\n      <div class=\"feature-item\">\r\n        <mat-card>\r\n          <mat-icon>code</mat-icon>\r\n          <div class=\"title mat-subheading-2\">Lazy loading</div>\r\n          <p class=\"decs mat-body\">\r\n            Nulla porttitor accumsan tincidunt. Mauris blandit aliquet elit, eget tincidunt nibh pulvinar a. Sed\r\n            porttitor lectus nibh.\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n\r\n      <div class=\"feature-item\">\r\n        <mat-card>\r\n          <mat-icon>code</mat-icon>\r\n          <div class=\"title mat-subheading-2\">State Management</div>\r\n          <p class=\"decs mat-body\">\r\n            Nulla porttitor accumsan tincidunt. Mauris blandit aliquet elit.\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n\r\n      <div class=\"feature-item\">\r\n        <mat-card>\r\n          <mat-icon>code</mat-icon>\r\n          <div class=\"title mat-subheading-2\">Cypress</div>\r\n          <p class=\"decs mat-body\">\r\n            Mauris blandit aliquet elit, eget tincidunt nibh pulvinar a. Sed\r\n            porttitor lectus nibh.\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n\r\n      <div class=\"feature-item\">\r\n        <mat-card>\r\n          <mat-icon>code</mat-icon>\r\n          <div class=\"title mat-subheading-2\">Storybook</div>\r\n          <p class=\"decs mat-body\">\r\n            Nulla porttitor accumsan tincidunt. Mauris blandit aliquet elit, eget tincidunt nibh pulvinar a. Sed\r\n            porttitor lectus nibh.\r\n          </p>\r\n        </mat-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</section>\r\n\r\n<section class=\"get-started\">\r\n  <div class=\"container\" fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n    <div>START BUILDING ANGULAR APPLICATIONS TODAY </div>\r\n\r\n    <a href=\"https://github.com/truonghungit/angular-starter\" target=\"_blank\" mat-raised-button color=\"accent\">GET STARTED</a>\r\n  </div>\r\n</section>\r\n"
        },
        {
            "name": "LockScreenPageComponent",
            "id": "component-LockScreenPageComponent-d2aa31defcb0b38b5a676fe40c003b43",
            "file": "src/app/auth/containers/lock-screen-page/lock-screen-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lock-screen-page",
            "styleUrls": [
                "./lock-screen-page.component.scss",
                "../auth-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lock-screen-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loggedInUser$",
                    "defaultValue": "this.store.pipe(select(AuthSelectors.selectLoggedInUser))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pending$",
                    "defaultValue": "this.store.pipe(select(LoginPageSelectors.selectLoginPagePending))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "onLogin",
                    "args": [
                        {
                            "name": "credential",
                            "type": "Credential"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "credential",
                            "type": "Credential",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\n\r\nimport { Credential } from '../../models';\r\nimport { AuthState } from '../../reducers';\r\nimport { LoginPageActions } from '../../actions';\r\nimport { AuthSelectors, LoginPageSelectors } from '../../selectors';\r\n\r\n@Component({\r\n  selector: 'app-lock-screen-page',\r\n  templateUrl: './lock-screen-page.component.html',\r\n  styleUrls: ['./lock-screen-page.component.scss', '../auth-page.scss']\r\n})\r\nexport class LockScreenPageComponent implements OnInit {\r\n\r\n  pending$ = this.store.pipe(select(LoginPageSelectors.selectLoginPagePending));\r\n  loggedInUser$ = this.store.pipe(select(AuthSelectors.selectLoggedInUser));\r\n\r\n  constructor(\r\n    private store: Store<AuthState>\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onLogin(credential: Credential): void {\r\n    this.store.dispatch(LoginPageActions.login({ credential }));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lock-screen-page.component.scss"
                },
                {
                    "data": ".auth-page {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: url('/assets/images/background_1.jpg');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.form {\r\n  display: block;\r\n  margin-top: 40px;\r\n}\r\n\r\n.auth-card {\r\n  width: 420px;\r\n  padding: 32px;\r\n  padding-bottom: 48px;\r\n}\r\n\r\nmat-progress-bar {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n}\r\n",
                    "styleUrl": "../auth-page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"auth-page\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n  <mat-card class=\"auth-card\">\r\n    <mat-progress-bar mode=\"indeterminate\"\r\n      *ngIf=\"pending$ | async\"></mat-progress-bar>\r\n\r\n    <mat-card-content *ngIf=\"loggedInUser$ | async as user\">\r\n\r\n      <h1 class=\"mat-h1\">{{ 'auth.pageTitle.lock' | translate }}</h1>\r\n\r\n      <app-unlock-screen-form\r\n        class=\"form\"\r\n        [pending]=\"pending$ | async\"\r\n        [user]=\"user\"\r\n        (login)=\"onLogin($event)\">\r\n      </app-unlock-screen-form>\r\n\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-c8cc6e2a3207f44cb65b075dc8da3310",
            "file": "src/app/auth/components/login-form/login-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-form",
            "styleUrls": [
                "./login-form.component.scss",
                "../auth-from.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pending",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "login",
                    "line": 15,
                    "type": "EventEmitter<Credential>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "formErrors",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onLoginFormValuesChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\nimport { takeUntilDestroy } from '@app/core/destroyable';\r\nimport { Credential } from '@app/auth';\r\n\r\n@Component({\r\n  selector: 'app-login-form',\r\n  templateUrl: './login-form.component.html',\r\n  styleUrls: ['./login-form.component.scss', '../auth-from.scss']\r\n})\r\nexport class LoginFormComponent implements OnInit {\r\n  @Input() pending: boolean;\r\n\r\n  @Output() login: EventEmitter<Credential>;\r\n\r\n  form: FormGroup;\r\n  formErrors: any;\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n\r\n    this.login = new EventEmitter();\r\n\r\n    this.formErrors = {\r\n      username: {},\r\n      password: {}\r\n    };\r\n    this.form = this.formBuilder.group({\r\n      username: ['admin@demo.com', Validators.required],\r\n      password: ['demo!23', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form.valueChanges.pipe(\r\n      takeUntilDestroy(this)\r\n    ).subscribe(() => {\r\n      this.onLoginFormValuesChanged();\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (!this.form.valid) {\r\n      return;\r\n    }\r\n    this.login.emit(this.form.value);\r\n  }\r\n\r\n  private onLoginFormValuesChanged() {\r\n    for (const field in this.formErrors) {\r\n      if (!this.formErrors.hasOwnProperty(field)) {\r\n        continue;\r\n      }\r\n\r\n      this.formErrors[field] = {};\r\n      const control = this.form.get(field);\r\n\r\n      if (control && control.dirty && !control.valid) {\r\n        this.formErrors[field] = control.errors;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login-form.component.scss"
                },
                {
                    "data": "mat-form-field {\r\n  width: 100%;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.action-button {\r\n  margin-top: 24px;\r\n}\r\n",
                    "styleUrl": "../auth-from.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form name=\"loginForm\"\r\n  autocomplete=\"off\"\r\n  novalidate\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"onSubmit()\">\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>{{ 'auth.label.username' | translate }}</mat-label>\r\n    <input matInput\r\n      autocomplete=\"off\"\r\n      tabindex=\"1\"\r\n      type=\"text\"\r\n      placeholder=\"{{ 'auth.label.username' | translate }}\"\r\n      formControlName=\"username\" />\r\n    <mat-icon matSuffix>account_circle</mat-icon>\r\n    <mat-error>\r\n      <span *ngIf=\"formErrors.username.required\">\r\n        {{ 'auth.error.username.required' | translate }}\r\n      </span>\r\n    </mat-error>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>{{ 'auth.label.password' | translate }}</mat-label>\r\n    <input matInput\r\n      autocomplete=\"off\"\r\n      tabindex=\"2\"\r\n      type=\"password\"\r\n      placeholder=\"{{ 'auth.label.password' | translate }}\"\r\n      formControlName=\"password\" />\r\n    <mat-icon matSuffix>lock</mat-icon>\r\n    <mat-error>\r\n      <span *ngIf=\"formErrors.password.required\">\r\n          {{ 'auth.error.password.required' | translate }}\r\n      </span>\r\n    </mat-error>\r\n  </mat-form-field>\r\n\r\n  <a [routerLink]=\"['/forgot-password']\">Forgot Password?</a>\r\n\r\n  <div>\r\n    <span fxFlex></span>\r\n    <button mat-raised-button\r\n      tabindex=\"3\"\r\n      color=\"accent\"\r\n      type=\"submit\"\r\n      class=\"action-button w-100\"\r\n      [disabled]=\"form.invalid || pending\">\r\n      {{ 'auth.button.login' | translate }}\r\n    </button>\r\n  </div>\r\n\r\n</form>\r\n\r\n<div class=\"text-center mt-32\">\r\n  <span>Don't have an account? </span>\r\n  <a [routerLink]=\"[ '/register' ]\">Create an account</a>\r\n</div>\r\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-876e1caa9c1f93234b9cfb3c449d8a0c",
            "file": "src/app/auth/containers/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [
                "./login-page.component.scss",
                "../auth-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error$",
                    "defaultValue": "this.store.pipe(select(LoginPageSelectors.selectLoginPageError))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pending$",
                    "defaultValue": "this.store.pipe(select(LoginPageSelectors.selectLoginPagePending))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "onLogin",
                    "args": [
                        {
                            "name": "credential",
                            "type": "Credential"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "credential",
                            "type": "Credential",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\n\r\nimport { AuthState } from '../../reducers';\r\nimport { Credential } from '../../models';\r\nimport { LoginPageActions } from '../../actions';\r\nimport { LoginPageSelectors } from '../../selectors';\r\n\r\n@Component({\r\n  selector: 'app-login-page',\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.scss', '../auth-page.scss']\r\n})\r\nexport class LoginPageComponent implements OnDestroy {\r\n\r\n  pending$ = this.store.pipe(select(LoginPageSelectors.selectLoginPagePending));\r\n  error$ = this.store.pipe(select(LoginPageSelectors.selectLoginPageError));\r\n\r\n  constructor(\r\n    private store: Store<AuthState>\r\n  ) { }\r\n\r\n  onLogin(credential: Credential) {\r\n    this.store.dispatch(LoginPageActions.login({ credential }));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.store.dispatch(LoginPageActions.leavePage());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login-page.component.scss"
                },
                {
                    "data": ".auth-page {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: url('/assets/images/background_1.jpg');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.form {\r\n  display: block;\r\n  margin-top: 40px;\r\n}\r\n\r\n.auth-card {\r\n  width: 420px;\r\n  padding: 32px;\r\n  padding-bottom: 48px;\r\n}\r\n\r\nmat-progress-bar {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n}\r\n",
                    "styleUrl": "../auth-page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div class=\"auth-page\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n  <mat-card class=\"auth-card\">\r\n    <mat-progress-bar mode=\"indeterminate\"\r\n      *ngIf=\"pending$ | async\"></mat-progress-bar>\r\n\r\n    <mat-card-content>\r\n\r\n      <h1 class=\"mat-h1 text-center\">{{ 'auth.pageTitle.login' | translate }}</h1>\r\n\r\n      <p class=\"mat-error\" *ngIf=\"error$ | async as error\">{{error.message}}</p>\r\n\r\n      <app-login-form\r\n        class=\"form\"\r\n        [pending]=\"pending$ | async\"\r\n        (login)=\"onLogin($event)\">\r\n      </app-login-form>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "LogoutConfirmationDialogComponent",
            "id": "component-LogoutConfirmationDialogComponent-e7ad3888a22d3280448bdd183c1560e7",
            "file": "src/app/auth/components/logout-confirmation/logout-confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logout-confirmation-dialog",
            "styleUrls": [
                "./logout-confirmation-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./logout-confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-logout-confirmation-dialog',\r\n  templateUrl: './logout-confirmation-dialog.component.html',\r\n  styleUrls: ['./logout-confirmation-dialog.component.scss']\r\n})\r\nexport class LogoutConfirmationDialogComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  max-width: 480px;\r\n  min-width: 420px;\r\n}\r\n\r\nmat-dialog-content {\r\n  min-height: 72px;\r\n}\r\n\r\nmat-dialog-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n",
                    "styleUrl": "./logout-confirmation-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<h2 mat-dialog-title>Logout</h2>\r\n\r\n<mat-dialog-content>Are you sure you want to logout?</mat-dialog-content>\r\n<mat-dialog-actions>\r\n  <button mat-button [mat-dialog-close]=\"false\">\r\n    {{ 'general.cancel' | translate }}\r\n  </button>\r\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"true\">\r\n    {{ 'general.logout' | translate }}\r\n  </button>\r\n</mat-dialog-actions>\r\n"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-8248040a335978f8e86fee6f8c21b4ef",
            "file": "src/app/shared/notification/notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification",
            "styleUrls": [
                "./notification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "duration",
                    "defaultValue": "10000",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mouseenter$",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timerSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "setupAutoClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "line": 36
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "line": 46
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject, HostListener, OnDestroy } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA, MatSnackBarRef } from '@angular/material/snack-bar';\r\nimport { timer, Subject, Subscription } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-notification',\r\n  templateUrl: './notification.component.html',\r\n  styleUrls: ['./notification.component.scss']\r\n})\r\nexport class NotificationComponent implements OnInit, OnDestroy {\r\n\r\n  private duration = 10000;\r\n  private componentDestroyed$: Subject<boolean>;\r\n  private mouseenter$: Subject<boolean>;\r\n  private timerSubscription: Subscription;\r\n\r\n  constructor(\r\n    private snackBarRef: MatSnackBarRef<NotificationComponent>,\r\n    @Inject(MAT_SNACK_BAR_DATA) public data: any\r\n  ) {\r\n\r\n    this.componentDestroyed$ = new Subject();\r\n    this.mouseenter$ = new Subject();\r\n\r\n    if (this.data.duration && this.data.duration > 0) {\r\n      this.duration = data.duration;\r\n    }\r\n\r\n    if (!this.data.title) {\r\n      this.data.title = 'App';\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseenter() {\r\n    this.mouseenter$.next();\r\n    this.mouseenter$.complete();\r\n\r\n    if (this.timerSubscription) {\r\n      this.timerSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseleave() {\r\n    if (this.timerSubscription) {\r\n      this.timerSubscription.unsubscribe();\r\n    }\r\n\r\n    this.timerSubscription = timer(this.duration).pipe(\r\n      takeUntil(this.componentDestroyed$)\r\n    ).subscribe(() => {\r\n      this.snackBarRef.dismiss();\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.setupAutoClose();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.componentDestroyed$.next();\r\n    this.componentDestroyed$.complete();\r\n  }\r\n\r\n  onClose() {\r\n    this.snackBarRef.dismiss();\r\n  }\r\n\r\n  private setupAutoClose() {\r\n    timer(this.duration).pipe(\r\n      takeUntil(this.mouseenter$)\r\n    ).subscribe(() => {\r\n      this.onClose();\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: row;\r\n  position: relative;\r\n  .logo {\r\n    height: 40px;\r\n    width: 40px;\r\n    overflow: hidden;\r\n    img {\r\n      height: 100%;\r\n    }\r\n  }\r\n  .content {\r\n    margin-left: 16px;\r\n    max-width: 260px;\r\n    min-width: 260px;\r\n  }\r\n  .title {\r\n    font-size: 16px;\r\n    line-height: 1;\r\n    margin-bottom: 8px;\r\n  }\r\n  .message {\r\n    color: #cccccc;\r\n  }\r\n  .close {\r\n    position: absolute;\r\n    right: -8px;\r\n    top: -8px;\r\n    // background: #323232;\r\n    cursor: pointer;\r\n    opacity: 0.5;\r\n    &:hover {\r\n      opacity: 0.9;\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./notification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snackBarRef",
                        "type": "MatSnackBarRef<NotificationComponent>"
                    },
                    {
                        "name": "data",
                        "type": "any"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "snackBarRef",
                        "type": "MatSnackBarRef<NotificationComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-icon class=\"close\" (click)=\"onClose()\">clear</mat-icon>\r\n<div class=\"logo\">\r\n  <img src=\"assets/images/logo.svg\" alt=\"\">\r\n</div>\r\n<div class=\"content\">\r\n  <div class=\"title\">{{ data.title }}</div>\r\n  <div class=\" mat-body-1\">{{ data.message }}</div>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ResetPasswordFormComponent",
            "id": "component-ResetPasswordFormComponent-6a51e8730f16cf18a7f7d21738f00537",
            "file": "src/app/auth/components/reset-password-form/reset-password-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password-form",
            "styleUrls": [
                "./reset-password-form.component.scss",
                "../auth-from.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pending",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "resetPassword",
                    "line": 17,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "formErrors",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "onLoginFormValuesChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { FormValidators } from '@app/shared/validators';\r\n\r\n@Component({\r\n  selector: 'app-reset-password-form',\r\n  templateUrl: './reset-password-form.component.html',\r\n  styleUrls: ['./reset-password-form.component.scss', '../auth-from.scss']\r\n})\r\nexport class ResetPasswordFormComponent implements OnInit {\r\n\r\n  @Input() pending: boolean;\r\n\r\n  @Output() resetPassword: EventEmitter<string>;\r\n\r\n  form: FormGroup;\r\n  formErrors: any;\r\n\r\n  private componentDestroyed$: Subject<boolean> = new Subject();\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n\r\n    this.resetPassword = new EventEmitter();\r\n\r\n    this.formErrors = {\r\n      password: {},\r\n      confirmPassword: {}\r\n    };\r\n    this.form = this.formBuilder.group(\r\n      {\r\n        password: [null, Validators.required],\r\n        confirmPassword: [null, [Validators.required]]\r\n      },\r\n      {\r\n        validators: [FormValidators.mustMatch('password', 'confirmPassword')]\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form.valueChanges.pipe(\r\n      takeUntil(this.componentDestroyed$)\r\n    ).subscribe(() => {\r\n      this.onLoginFormValuesChanged();\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (!this.form.valid) {\r\n      return;\r\n    }\r\n    this.resetPassword.emit(this.form.value.password);\r\n  }\r\n\r\n  private onLoginFormValuesChanged() {\r\n    for (const field in this.formErrors) {\r\n      if (!this.formErrors.hasOwnProperty(field)) {\r\n        continue;\r\n      }\r\n\r\n      this.formErrors[field] = {};\r\n      const control = this.form.get(field);\r\n\r\n      if (control && control.dirty && !control.valid) {\r\n        this.formErrors[field] = control.errors;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reset-password-form.component.scss"
                },
                {
                    "data": "mat-form-field {\r\n  width: 100%;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.action-button {\r\n  margin-top: 24px;\r\n}\r\n",
                    "styleUrl": "../auth-from.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form name=\"resetPasswordForm\"\r\n  autocomplete=\"off\"\r\n  novalidate\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"onSubmit()\">\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>{{ 'auth.label.password' | translate }}</mat-label>\r\n    <input matInput\r\n      autocomplete=\"off\"\r\n      tabindex=\"1\"\r\n      type=\"text\"\r\n      placeholder=\"{{ 'auth.label.password' | translate }}\"\r\n      formControlName=\"password\" />\r\n    <mat-icon matSuffix>lock</mat-icon>\r\n    <mat-error>\r\n      <span *ngIf=\"formErrors.password.required\">\r\n        {{ 'auth.error.password.required' | translate }}\r\n      </span>\r\n    </mat-error>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>{{ 'auth.label.confirmPassword' | translate }}</mat-label>\r\n    <input matInput\r\n      autocomplete=\"off\"\r\n      tabindex=\"2\"\r\n      type=\"password\"\r\n      placeholder=\"{{ 'auth.label.confirmPassword' | translate }}\"\r\n      formControlName=\"confirmPassword\" />\r\n    <mat-icon matSuffix>lock</mat-icon>\r\n    <mat-error>\r\n      <span *ngIf=\"formErrors.confirmPassword.required\">\r\n          {{ 'auth.error.confirmPassword.required' | translate }}\r\n      </span>\r\n      <span *ngIf=\"formErrors.confirmPassword.mustMatch\">\r\n          {{ 'auth.error.confirmPassword.mustMatch' | translate }}\r\n      </span>\r\n    </mat-error>\r\n  </mat-form-field>\r\n\r\n  <div>\r\n    <span fxFlex></span>\r\n    <button mat-raised-button\r\n      tabindex=\"3\"\r\n      color=\"accent\"\r\n      type=\"submit\"\r\n      class=\"action-button w-100\"\r\n      [disabled]=\"form.invalid || pending\">\r\n      {{ 'auth.button.resetPassword' | translate }}\r\n    </button>\r\n  </div>\r\n\r\n</form>\r\n\r\n<div class=\"text-center mt-32\">\r\n  <a [routerLink]=\"[ '/login' ]\">Login</a>\r\n</div>\r\n"
        },
        {
            "name": "ResetPasswordPageComponent",
            "id": "component-ResetPasswordPageComponent-ea9365a1dc009c7ec7ea71a2c3f98d62",
            "file": "src/app/auth/containers/reset-password-page/reset-password-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password-page",
            "styleUrls": [
                "./reset-password-page.component.scss",
                "../auth-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "pending$",
                    "defaultValue": "this.store.pipe(select(ResetPasswordSelectors.selectResetPasswordPagePending))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "onResetPassword",
                    "args": [
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\n\r\nimport { AuthState } from '../../reducers';\r\nimport { ResetPasswordActions } from '../../actions';\r\nimport { ResetPasswordSelectors } from '../../selectors';\r\n\r\n@Component({\r\n  selector: 'app-reset-password-page',\r\n  templateUrl: './reset-password-page.component.html',\r\n  styleUrls: ['./reset-password-page.component.scss', '../auth-page.scss']\r\n})\r\nexport class ResetPasswordPageComponent {\r\n\r\n  pending$ = this.store.pipe(select(ResetPasswordSelectors.selectResetPasswordPagePending));\r\n\r\n  constructor(\r\n    private store: Store<AuthState>\r\n  ) { }\r\n\r\n  onResetPassword(password: string): void {\r\n    this.store.dispatch(ResetPasswordActions.resetPassword({ password }));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reset-password-page.component.scss"
                },
                {
                    "data": ".auth-page {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: url('/assets/images/background_1.jpg');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n\r\n.form {\r\n  display: block;\r\n  margin-top: 40px;\r\n}\r\n\r\n.auth-card {\r\n  width: 420px;\r\n  padding: 32px;\r\n  padding-bottom: 48px;\r\n}\r\n\r\nmat-progress-bar {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n}\r\n",
                    "styleUrl": "../auth-page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"auth-page\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n  <mat-card class=\"auth-card\">\r\n    <mat-progress-bar mode=\"indeterminate\"\r\n      *ngIf=\"pending$ | async\"></mat-progress-bar>\r\n\r\n    <mat-card-content>\r\n\r\n      <h1 class=\"mat-h1 text-center\">{{ 'auth.pageTitle.resetPassword' | translate }}</h1>\r\n\r\n      <app-reset-password-form\r\n        class=\"form\"\r\n        [pending]=\"pending$ | async\"\r\n        (login)=\"onResetPassword($event)\">\r\n      </app-reset-password-form>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "SettingsPageComponent",
            "id": "component-SettingsPageComponent-4ad0e88878470fa4476cf67db1f8e527",
            "file": "src/app/admin/account/settings-page/settings-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-page",
            "styleUrls": [
                "./settings-page.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-settings-page',\r\n  templateUrl: './settings-page.component.html',\r\n  styleUrls: ['./settings-page.component.css']\r\n})\r\nexport class SettingsPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./settings-page.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>settings-page works!</p>\r\n"
        },
        {
            "name": "SliderComponent",
            "id": "component-SliderComponent-e64814f4e88fa503c8db85d7fe554a71",
            "file": "src/app/shared/slider/slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-slider",
            "styleUrls": [
                "./slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slider.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "value",
                    "line": 9,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "ok",
                    "defaultValue": "new EventEmitter()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "onOkClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-slider',\r\n  templateUrl: './slider.component.html',\r\n  styleUrls: ['./slider.component.scss']\r\n})\r\nexport class SliderComponent implements OnInit {\r\n  @Input() value: number;\r\n  @Input() color: string;\r\n  @Output() ok = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onOkClicked() {\r\n    this.ok.emit('OK' + this.value);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: inline-block;\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  padding: 8px;\r\n  outline: 0;\r\n  vertical-align: middle;\r\n  width: 300px;\r\n}\r\n\r\n.mat-slider-wrapper {\r\n  height: 2px;\r\n  top: 23px;\r\n  left: 8px;\r\n  right: 8px;\r\n  position: absolute;\r\n}\r\n\r\n.mat-slider-track-wrapper {\r\n  height: 2px;\r\n  width: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  overflow: hidden;\r\n}\r\n\r\n.mat-slider-track-background {\r\n  height: 2px;\r\n  width: 100%;\r\n  background-color: rgba(0, 0, 0, 0.26);\r\n  transform: scaleX(1);\r\n  transform-origin: 100% 100%;\r\n  transition: transform .4s cubic-bezier(.25, .8, .25, 1), background-color .4s cubic-bezier(.25, .8, .25, 1);\r\n}\r\n\r\n.mat-slider-track-fill {\r\n  z-index: 1;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 2px;\r\n  width: 100%;\r\n  transform: scaleX(0);\r\n  background-color: #ffd740;\r\n  position: absolute;\r\n  transform-origin: 0 0;\r\n  transition: transform .4s cubic-bezier(.25, .8, .25, 1), background-color .4s cubic-bezier(.25, .8, .25, 1);\r\n}\r\n",
                    "styleUrl": "./slider.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mat-slider-wrapper\">\r\n  <div class=\"mat-slider-track-wrapper\">\r\n    <div class=\"mat-slider-track-background\"\r\n      [ngStyle]=\"{'transform': 'translateX(0px) scale3d(' + (100-value)/100 +', 1, 1)'}\">\r\n    </div>\r\n    <div class=\"mat-slider-track-fill\"\r\n      [ngStyle]=\"{\r\n        'transform': 'translateX(0px) scale3d(' + (value)/100 +', 1, 1)',\r\n        'background-color': color\r\n      }\">\r\n    </div>\r\n  </div>\r\n  <div class=\"mat-slider-ticks-container\">\r\n    <div class=\"mat-slider-ticks\"></div>\r\n  </div>\r\n  <div class=\"mat-slider-thumb-container\">\r\n    <div class=\"mat-slider-focus-ring\"></div>\r\n    <div class=\"mat-slider-thumb\"></div>\r\n    <div class=\"mat-slider-thumb-label\">\r\n      <span class=\"mat-slider-thumb-label-text\">{{value}}</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "UnlockScreenFormComponent",
            "id": "component-UnlockScreenFormComponent-7898712fb4a847517353b8eaf472131f",
            "file": "src/app/auth/components/unlock-screen-form/unlock-screen-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-unlock-screen-form",
            "styleUrls": [
                "./unlock-screen-form.component.scss",
                "../auth-from.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./unlock-screen-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pending",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "user",
                    "line": 13,
                    "type": "UserProfile"
                }
            ],
            "outputsClass": [
                {
                    "name": "login",
                    "line": 15,
                    "type": "EventEmitter<Credential>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "formErrors",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "onLoginFormValuesChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\nimport { takeUntilDestroy } from '@app/core/destroyable';\r\nimport { Credential, UserProfile } from '../../models';\r\n@Component({\r\n  selector: 'app-unlock-screen-form',\r\n  templateUrl: './unlock-screen-form.component.html',\r\n  styleUrls: ['./unlock-screen-form.component.scss', '../auth-from.scss']\r\n})\r\nexport class UnlockScreenFormComponent implements OnChanges, OnInit {\r\n  @Input() pending: boolean;\r\n  @Input() user: UserProfile;\r\n\r\n  @Output() login: EventEmitter<Credential>;\r\n\r\n  form: FormGroup;\r\n  formErrors: any;\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n    this.login = new EventEmitter();\r\n\r\n    this.formErrors = {\r\n      username: {},\r\n      password: {}\r\n    };\r\n    this.form = this.formBuilder.group({\r\n      username: [null, Validators.required],\r\n      password: [null, Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.user && this.user) {\r\n      if (this.form) {\r\n        this.form.patchValue({ username: this.user.username });\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form.valueChanges.pipe(\r\n      takeUntilDestroy(this)\r\n    ).subscribe(() => {\r\n      this.onLoginFormValuesChanged();\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (!this.form.valid) {\r\n      return;\r\n    }\r\n    this.login.emit(this.form.value);\r\n  }\r\n\r\n  private onLoginFormValuesChanged() {\r\n    for (const field in this.formErrors) {\r\n      if (!this.formErrors.hasOwnProperty(field)) {\r\n        continue;\r\n      }\r\n\r\n      this.formErrors[field] = {};\r\n      const control = this.form.get(field);\r\n\r\n      if (control && control.dirty && !control.valid) {\r\n        this.formErrors[field] = control.errors;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./unlock-screen-form.component.scss"
                },
                {
                    "data": "mat-form-field {\r\n  width: 100%;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.action-button {\r\n  margin-top: 24px;\r\n}\r\n",
                    "styleUrl": "../auth-from.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<form name=\"loginForm\"\r\n  autocomplete=\"off\"\r\n  novalidate\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"onSubmit()\">\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>{{ 'auth.label.username' | translate }}</mat-label>\r\n    <input matInput\r\n      autocomplete=\"off\"\r\n      tabindex=\"1\"\r\n      type=\"text\"\r\n      readonly\r\n      placeholder=\"{{ 'auth.label.username' | translate }}\"\r\n      formControlName=\"username\" />\r\n    <mat-icon matSuffix>account_circle</mat-icon>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <input matInput\r\n      autocomplete=\"off\"\r\n      tabindex=\"2\"\r\n      type=\"password\"\r\n      placeholder=\"{{ 'auth.label.password' | translate }}\"\r\n      formControlName=\"password\" />\r\n    <mat-icon matSuffix>lock</mat-icon>\r\n    <mat-error>\r\n      <span *ngIf=\"formErrors.password.required\">\r\n          {{ 'auth.error.password.required' | translate }}\r\n      </span>\r\n    </mat-error>\r\n  </mat-form-field>\r\n\r\n  <div>\r\n    <span fxFlex></span>\r\n    <button mat-raised-button\r\n      tabindex=\"3\"\r\n      color=\"accent\"\r\n      type=\"submit\"\r\n      class=\"action-button w-100\"\r\n      [disabled]=\"form.invalid || pending\">\r\n      {{ 'auth.button.unlock' | translate }}\r\n    </button>\r\n  </div>\r\n\r\n</form>\r\n"
        },
        {
            "name": "UserAvatarComponent",
            "id": "component-UserAvatarComponent-4ee3b6e1f2d4d1a869412a874cb9fec4",
            "file": "src/app/admin/chat/components/user-avatar/user-avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-user-avatar",
            "styleUrls": [
                "./user-avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "avatarUrl",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-chat-user-avatar',\r\n  templateUrl: './user-avatar.component.html',\r\n  styleUrls: ['./user-avatar.component.scss']\r\n})\r\nexport class UserAvatarComponent implements OnInit {\r\n\r\n  @Input() avatarUrl: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user-avatar {\r\n  height: 32px;\r\n  width: 32px;\r\n  display: inline-block;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n}\r\n\r\n.user-avatar img {\r\n  max-width: 100%;\r\n}\r\n",
                    "styleUrl": "./user-avatar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"user-avatar\">\r\n  <img src=\"{{ avatarUrl }}\" alt=\"\">\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AccountModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SettingsPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AccountRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AccountRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdminLayoutComponent"
                        },
                        {
                            "name": "AdminSidebarComponent"
                        },
                        {
                            "name": "AdminToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppLayoutModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppLayoutModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ForgotPasswordFromComponent"
                        },
                        {
                            "name": "ForgotPasswordPageComponent"
                        },
                        {
                            "name": "LockScreenPageComponent"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "LogoutConfirmationDialogComponent"
                        },
                        {
                            "name": "ResetPasswordFormComponent"
                        },
                        {
                            "name": "ResetPasswordPageComponent"
                        },
                        {
                            "name": "UnlockScreenFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChatModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChatImageMessageComponent"
                        },
                        {
                            "name": "ChatPageComponent"
                        },
                        {
                            "name": "ChatTextMessageComponent"
                        },
                        {
                            "name": "ForgotPasswordFromComponent"
                        },
                        {
                            "name": "ForgotPasswordPageComponent"
                        },
                        {
                            "name": "LockScreenPageComponent"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "LogoutConfirmationDialogComponent"
                        },
                        {
                            "name": "ResetPasswordFormComponent"
                        },
                        {
                            "name": "ResetPasswordPageComponent"
                        },
                        {
                            "name": "UnlockScreenFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ChatRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ForgotPasswordFromComponent"
                        },
                        {
                            "name": "ForgotPasswordPageComponent"
                        },
                        {
                            "name": "LockScreenPageComponent"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "LogoutConfirmationDialogComponent"
                        },
                        {
                            "name": "ResetPasswordFormComponent"
                        },
                        {
                            "name": "ResetPasswordPageComponent"
                        },
                        {
                            "name": "UnlockScreenFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChatRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContactModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ContactService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ForgotPasswordFromComponent"
                        },
                        {
                            "name": "ForgotPasswordPageComponent"
                        },
                        {
                            "name": "LockScreenPageComponent"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "LogoutConfirmationDialogComponent"
                        },
                        {
                            "name": "ResetPasswordFormComponent"
                        },
                        {
                            "name": "ResetPasswordPageComponent"
                        },
                        {
                            "name": "UnlockScreenFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ContactRoutingModule"
                        },
                        {
                            "name": "DialogModule"
                        },
                        {
                            "name": "NotificationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContactRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DashboardRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertDialogComponent"
                        },
                        {
                            "name": "ConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertDialogComponent"
                        },
                        {
                            "name": "ConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "NotificationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotificationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SliderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SliderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SliderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WebStorageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LocalStorageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/reducers/contact.reducer.ts",
                "type": "EntityAdapter<ContactModel>",
                "defaultValue": "createEntityAdapter<ContactModel>({\r\n  selectId: (contact: ContactModel) => contact.id,\r\n  sortComparer: sortByUsername,\r\n})"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/configs/index.ts",
                "type": "object",
                "defaultValue": "{\r\n  i18n\r\n}"
            },
            {
                "name": "appSettingsAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/app-settings/app-settings.action.ts",
                "type": "object",
                "defaultValue": "{\r\n  changeLanguage,\r\n  changeTheme\r\n}"
            },
            {
                "name": "appSettingsSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/app-settings/app-settings.selector.ts",
                "type": "object",
                "defaultValue": "{\r\n  selectAppSettingsState,\r\n  selectAppSettings,\r\n  selectCurrentLanguage\r\n}"
            },
            {
                "name": "AUTH_CONFIGURATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/auth.config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<AuthConfiguration>('Auth configuration')"
            },
            {
                "name": "authConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "type": "AuthConfiguration",
                "defaultValue": "{\r\n  loginURL: 'login',\r\n  loginApiURL: 'auth/login',\r\n  headerName: 'Authorization',\r\n  skipWhenExpired: true,\r\n  whitelistedDomains: [\r\n    environment.apiBaseUrl\r\n  ],\r\n  blacklistedRoutes: [\r\n    'auth/login'\r\n  ]\r\n}"
            },
            {
                "name": "authFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/auth.config.ts",
                "type": "string",
                "defaultValue": "'auth'"
            },
            {
                "name": "changeLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/app-settings/app-settings.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Settings] Change Language',\r\n  props<{ language: Language }>()\r\n)"
            },
            {
                "name": "changeTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/app-settings/app-settings.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Settings] Change Theme',\r\n  props<{ theme: string }>()\r\n)"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/components/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n  ForgotPasswordFromComponent,\r\n  LoginFormComponent,\r\n  LogoutConfirmationDialogComponent,\r\n  ResetPasswordFormComponent,\r\n  UnlockScreenFormComponent\r\n]"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/chat/components/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n  ChatMessageComponent,\r\n  ChatImageMessageComponent,\r\n  UserAvatarComponent\r\n]"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/components/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n  ContactFormComponent,\r\n  ContactTableComponent\r\n]"
            },
            {
                "name": "CONTAINER_COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/dashboard/containers/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n  DashboardPageComponent\r\n]"
            },
            {
                "name": "CONTAINERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/containers/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n  LoginPageComponent,\r\n  LockScreenPageComponent,\r\n  ForgotPasswordPageComponent,\r\n  ResetPasswordPageComponent\r\n]"
            },
            {
                "name": "CONTAINERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/chat/containers/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n  ChatBoxComponent,\r\n  ChatBoxHeaderComponent,\r\n  ChatBoxMessagesComponent,\r\n  ChatBoxFormComponent,\r\n  ChatPageComponent\r\n]"
            },
            {
                "name": "CONTAINERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/containers/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n  ContactCreatePageComponent,\r\n  ContactDetailPageComponent,\r\n  ContactListPageComponent\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "createContact",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Create contact',\r\n  props<{ contact: CreateContactModel }>()\r\n)"
            },
            {
                "name": "createContactFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Create contact failure',\r\n  props<{ error: HttpError }>()\r\n)"
            },
            {
                "name": "createContactSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Create contact success',\r\n  props<{ contact: ContactModel }>()\r\n)"
            },
            {
                "name": "defaultAuthConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/auth.config.ts",
                "type": "AuthConfiguration",
                "defaultValue": "{\r\n  loginURL: 'login',\r\n  loginApiURL: 'login',\r\n  headerName: 'Authorization',\r\n  skipWhenExpired: true,\r\n  whitelistedDomains: [],\r\n  blacklistedRoutes: []\r\n}"
            },
            {
                "name": "defaultRetryStrategyConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/http/interceptors/retry-interceptor.ts",
                "type": "RetryStrategyConfig",
                "defaultValue": "{\r\n  maxRetryAttempts: environment.http.maxRetryAttempts,\r\n  scalingDuration: 1000,\r\n  excludedStatusCodes: [401, 403, 404]\r\n}"
            },
            {
                "name": "defaultSentryConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/logger/sentry.config.ts",
                "type": "SentryConfiguration",
                "defaultValue": "{\r\n  dsn: '<your-dsn>',\r\n  environment: 'dev',\r\n  release: '<your-release>'\r\n}"
            },
            {
                "name": "defaultWebStorageConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/web-storage/web-storage.config.ts",
                "type": "WebStorageConfiguration",
                "defaultValue": "{\r\n  prefix: 'web_storage',\r\n  allowNull: true\r\n}"
            },
            {
                "name": "deleteContact",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Delete contact',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "deleteContactFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Delete contact failure',\r\n  props<{ error: HttpError }>()\r\n)"
            },
            {
                "name": "deleteContactSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Delete contact success',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "destroy$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/destroyable/take-until-destroy.ts",
                "type": "",
                "defaultValue": "Symbol('componentDestroy$')"
            },
            {
                "name": "DIALOGS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/dialog/dialog.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  AlertDialogComponent,\r\n  ConfirmDialogComponent\r\n]"
            },
            {
                "name": "EFFECTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/effects/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n  ContactEffect\r\n]"
            },
            {
                "name": "ENTRY_COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/components/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n  LogoutConfirmationDialogComponent\r\n]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  enableLogger: true,\r\n  apiBaseUrl: 'https://angular-starter-api.herokuapp.com/',\r\n  http: {\r\n    maxRetryAttempts: 0\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  enableLogger: false,\r\n  apiBaseUrl: 'https://angular-starter-api.herokuapp.com/',\r\n  http: {\r\n    maxRetryAttempts: 0\r\n  }\r\n}"
            },
            {
                "name": "featureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/contact.config.ts",
                "type": "string",
                "defaultValue": "'contact'"
            },
            {
                "name": "findContact",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Find contact',\r\n  props<{ query: any }>()\r\n)"
            },
            {
                "name": "findContactById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Find contact by id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "findContactByIdFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Find contact by id failure',\r\n  props<{ error: HttpError }>()\r\n)"
            },
            {
                "name": "findContactByIdSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Find contact by id success',\r\n  props<{ contact: ContactModel }>()\r\n)"
            },
            {
                "name": "findContactFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Find contact failure',\r\n  props<{ error: HttpError }>()\r\n)"
            },
            {
                "name": "findContactSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Find contact success',\r\n  props<{ contacts: Array<ContactModel> }>()\r\n)"
            },
            {
                "name": "genericRetryStrategy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/http/interceptors/retry-interceptor.ts",
                "type": "",
                "defaultValue": "(config: RetryStrategyConfig = defaultRetryStrategyConfig) =>\r\n  (attempts: Observable<any>) => {\r\n    return attempts.pipe(\r\n      mergeMap((error, i) => {\r\n        const retryAttempt = i + 1;\r\n        // if maximum number of retries have been met\r\n        // or response is a status code we don't wish to retry, throw error\r\n        if (retryAttempt > config.maxRetryAttempts ||\r\n          config.excludedStatusCodes.find(e => e === error.status)) {\r\n          return throwError(error);\r\n        }\r\n\r\n        return timer(retryAttempt * config.scalingDuration);\r\n      })\r\n    );\r\n  }"
            },
            {
                "name": "getAuthToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.authToken"
            },
            {
                "name": "getError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.error"
            },
            {
                "name": "getError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.error"
            },
            {
                "name": "getLoggedInUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.loggedInUser"
            },
            {
                "name": "getPending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.pending"
            },
            {
                "name": "getPending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.pending"
            },
            {
                "name": "i18n",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/configs/i18n.config.ts",
                "type": "object",
                "defaultValue": "{\r\n  prefix: '/assets/i18n',\r\n  modules: [\r\n    'general',\r\n    'auth',\r\n    'account',\r\n    'contact'\r\n  ]\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  authToken: undefined,\r\n  loggedInUser: {\r\n    id: 'fcad7516-9fec',\r\n    username: 'ponyaim',\r\n    avatarUrl: './assets/images/dev.png'\r\n  }\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  error: null,\r\n  pending: false,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  error: null,\r\n  pending: false,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/reducers/contact-detail-page.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  loading: false,\r\n  saving: false\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/reducers/contact.reducer.ts",
                "type": "State",
                "defaultValue": "adapter.getInitialState({})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/reducers/contact-list-page.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  pending: false\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/app-settings/app-settings.reducer.ts",
                "type": "AppSettingsState",
                "defaultValue": "{\r\n  language: 'en',\r\n  theme: 'DEFAULT-THEME'\r\n}"
            },
            {
                "name": "initPagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/data-table/pagination.model.ts",
                "type": "object",
                "defaultValue": "{\r\n  pageSize: 10,\r\n  pageNumber: 0,\r\n  totalElement: undefined,\r\n  totalPages: undefined\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "leavePage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/login-page.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Login Page] leave page'\r\n)"
            },
            {
                "name": "lock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Lock screen'\r\n)"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loggerConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/logger/logger.config.ts",
                "type": "LoggerConfiguration",
                "defaultValue": "{\r\n  enable: environment.enableLogger\r\n}"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/login-page.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Login Page] Login',\r\n  props<{ credential: Credential }>()\r\n)"
            },
            {
                "name": "loginFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth-api.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth/API] Login Failure',\r\n  props<{ error: HttpError }>()\r\n)"
            },
            {
                "name": "loginPageFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "string",
                "defaultValue": "'loginPage'"
            },
            {
                "name": "loginRedirect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Login Redirect'\r\n)"
            },
            {
                "name": "loginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth-api.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth/API] Login Success',\r\n  props<{ authToken: AuthToken }>()\r\n)"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Logout'\r\n)"
            },
            {
                "name": "logoutConfirmation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Logout Confirmation'\r\n)"
            },
            {
                "name": "logoutConfirmationDismiss",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Logout Confirmation Dismiss'\r\n)"
            },
            {
                "name": "MAT_MODULES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/admin.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatIconModule\r\n]"
            },
            {
                "name": "MAT_MODULES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/auth.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatCardModule,\r\n  MatDialogModule,\r\n  MatProgressBarModule\r\n]"
            },
            {
                "name": "MAT_MODULES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/home.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatIconModule,\r\n  MatCardModule,\r\n]"
            },
            {
                "name": "MAT_MODULES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/contact.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  MatTableModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatCheckboxModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatDialogModule,\r\n  MatMenuModule,\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatTabsModule\r\n]"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducer.ts",
                "type": "Array<MetaReducer<AppState>>",
                "defaultValue": "!env.production\r\n  ? [logger, localStorageSyncReducer]\r\n  : [localStorageSyncReducer]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(AuthApiActions.loginSuccess, (state, { authToken }) => ({\r\n    ...state,\r\n    authToken\r\n  })),\r\n\r\n  on(AuthActions.lock, (state) => ({\r\n    ...state,\r\n    authToken: undefined\r\n  })),\r\n\r\n  on(AuthActions.logout, () => initialState)\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(ResetPasswordActions.sendResetPasswordLink, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: true,\r\n  })),\r\n\r\n  on(ResetPasswordActions.sendResetPasswordLinkSuccess, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: false,\r\n  })),\r\n\r\n  on(ResetPasswordActions.sendResetPasswordLinkFailure, (state, { error }) => ({\r\n    ...state,\r\n    error,\r\n    pending: false,\r\n  }))\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(LoginPageActions.login, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: true,\r\n  })),\r\n\r\n  on(LoginPageActions.leavePage, state => ({\r\n    ...state,\r\n    error: null\r\n  })),\r\n\r\n  on(AuthApiActions.loginSuccess, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: false,\r\n  })),\r\n\r\n  on(AuthApiActions.loginFailure, (state, { error }) => ({\r\n    ...state,\r\n    error,\r\n    pending: false,\r\n  }))\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/reducers/contact-detail-page.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(\r\n    ContactActions.findContactById,\r\n    (state) => ({ ...state, loading: true })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.updateContact,\r\n    (state) => ({ ...state, saving: true })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.findContactByIdSuccess,\r\n    ContactActions.findContactByIdFailure,\r\n    (state) => ({ ...state, loading: false })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.updateContactSuccess,\r\n    ContactActions.updateContactFailure,\r\n    (state) => ({ ...state, saving: false })\r\n  )\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/reducers/contact.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(\r\n    ContactActions.findContactSuccess,\r\n    (state, { contacts }) => {\r\n      return adapter.addMany(contacts, state);\r\n    }\r\n  ),\r\n\r\n  on(\r\n    ContactActions.findContactByIdSuccess,\r\n    (state, { contact }) => {\r\n      return adapter.addOne(contact, state);\r\n    }\r\n  )\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/reducers/contact-list-page.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(\r\n    ContactActions.findContact,\r\n    (state) => ({ ...state, pending: true })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.findContactSuccess,\r\n    ContactActions.findContactFailure,\r\n    (state) => ({ ...state, pending: false })\r\n  )\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/app-settings/app-settings.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(\r\n    appSettingsAction.changeLanguage,\r\n    (state, { language }) => ({ ...state, language })\r\n  ),\r\n)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducer.ts",
                "type": "ActionReducerMap<AppState, Action>",
                "defaultValue": "{\r\n  router: routerReducer,\r\n  appSettings: appSettingsReducer\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "resetPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/reset-password.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[RESET PASSWORD] reset password',\r\n  props<{ password: string }>()\r\n)"
            },
            {
                "name": "resetPasswordFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/reset-password.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[RESET PASSWORD] reset password failure',\r\n  props<{ error: HttpError }>()\r\n)"
            },
            {
                "name": "resetPasswordPageFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "string",
                "defaultValue": "'resetPasswordPage'"
            },
            {
                "name": "resetPasswordSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/reset-password.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[RESET PASSWORD] reset password success',\r\n  props<{ response: any }>()\r\n)"
            },
            {
                "name": "routeAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/layout/admin-layout/animations.ts",
                "type": "",
                "defaultValue": "trigger('routeAnimations', [\r\n    state('open', style({\r\n      opacity: 1,\r\n      backgroundColor: 'yellow'\r\n    })),\r\n    state('closed', style({\r\n      opacity: 0.5,\r\n      backgroundColor: 'green'\r\n    })),\r\n\r\n    transition('open => closed', [\r\n      animate('1s')\r\n    ]),\r\n    transition('closed => open', [\r\n      animate('0.5s')\r\n    ])\r\n  ])"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAppSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/app-settings/app-settings.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAppSettingsState,\r\n  (state: AppSettingsState) => state\r\n)"
            },
            {
                "name": "selectAppSettingsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/app-settings/app-settings.selector.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<\r\n  AppState,\r\n  AppSettingsState\r\n>('appSettings')"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AuthState>(\r\n  authFeatureKey\r\n)"
            },
            {
                "name": "selectAuthStatusState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/selectors/auth.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: AuthState) => state.status\r\n)"
            },
            {
                "name": "selectAuthToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/selectors/auth.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAuthStatusState,\r\n  fromAuth.getAuthToken\r\n)"
            },
            {
                "name": "selectContactById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/selectors/contact.selector.ts",
                "type": "",
                "defaultValue": "(id: string) => createSelector(\r\n  selectContactEntities,\r\n  (contactEntities) => contactEntities[id]\r\n)"
            },
            {
                "name": "selectContactDetailPageLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/selectors/contact-detail-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectContactDetailPageState,\r\n  (contactDetailPageState) => contactDetailPageState.loading\r\n)"
            },
            {
                "name": "selectContactDetailPageSaving",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/selectors/contact-detail-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectContactDetailPageState,\r\n  (contactDetailPageState) => contactDetailPageState.saving\r\n)"
            },
            {
                "name": "selectContactDetailPageState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/selectors/contact-detail-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectContactState,\r\n  state => state.contactDetailPage\r\n)"
            },
            {
                "name": "selectContactEntitiesState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/selectors/contact.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectContactState,\r\n  state => state.contact\r\n)"
            },
            {
                "name": "selectContactListPagePending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/selectors/contact-list-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectContactListPageState,\r\n  (contactListPageState) => contactListPageState.pending\r\n)"
            },
            {
                "name": "selectContactListPageState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/selectors/contact-list-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectContactState,\r\n  state => state.contactListPage\r\n)"
            },
            {
                "name": "selectContactState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/reducers/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<ContactState>(featureKey)"
            },
            {
                "name": "selectCurrentLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/app-settings/app-settings.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAppSettingsState,\r\n  (state: AppSettingsState) => state.language\r\n)"
            },
            {
                "name": "selectIsAuthenticated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/selectors/auth.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAuthToken,\r\n  (authToken: AuthToken): boolean => {\r\n    return authToken && AuthToken.isValid(authToken);\r\n  }\r\n)"
            },
            {
                "name": "selectLoggedInUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/selectors/auth.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAuthStatusState,\r\n  fromAuth.getLoggedInUser\r\n)"
            },
            {
                "name": "selectLoginPageError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/selectors/login-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectLoginPageState,\r\n  fromLoginPage.getError\r\n)"
            },
            {
                "name": "selectLoginPagePending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/selectors/login-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectLoginPageState,\r\n  fromLoginPage.getPending\r\n)"
            },
            {
                "name": "selectLoginPageState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/selectors/login-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: AuthState) => state.loginPage\r\n)"
            },
            {
                "name": "selectResetPasswordPageError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/selectors/reset-password-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectResetPasswordPageState,\r\n  fromResetPasswordPage.getError\r\n)"
            },
            {
                "name": "selectResetPasswordPagePending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/selectors/reset-password-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectResetPasswordPageState,\r\n  fromResetPasswordPage.getPending\r\n)"
            },
            {
                "name": "selectResetPasswordPageState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/selectors/reset-password-page.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: AuthState) => state.resetPasswordPage\r\n)"
            },
            {
                "name": "sendResetPasswordLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/reset-password.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[RESET PASSWORD] send reset password link',\r\n  props<{ email: string }>()\r\n)"
            },
            {
                "name": "sendResetPasswordLinkFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/reset-password.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[RESET PASSWORD] send reset password link failure',\r\n  props<{ error: HttpError }>()\r\n)"
            },
            {
                "name": "sendResetPasswordLinkSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/reset-password.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[RESET PASSWORD] send reset password link success',\r\n  props<{ response: any }>()\r\n)"
            },
            {
                "name": "SERVICES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/services/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n  ContactService\r\n]"
            },
            {
                "name": "slideInTop",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/layout/admin-layout/animations.ts",
                "type": "",
                "defaultValue": "trigger('slideInTop', [\r\n    state('void', style({\r\n      opacity: 0.5,\r\n      transform: 'translateY(-100%)',\r\n      display: 'none'\r\n    })),\r\n    state('*', style({\r\n      transform: 'translateY(0)',\r\n      backgroundColor: 'green',\r\n      display: 'flex'\r\n    })),\r\n    transition('void => *', animate('300ms')),\r\n    transition('* => *', animate('300ms'))\r\n  ])"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "statusFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "string",
                "defaultValue": "'status'"
            },
            {
                "name": "takeUntilDestroy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/destroyable/take-until-destroy.ts",
                "type": "",
                "defaultValue": "<T>(component: any): MonoTypeOperatorFunction<T> => {\r\n  if (component[destroy$] === undefined) {\r\n    addDestroyObservableToComponent(component);\r\n  }\r\n\r\n  return takeUntil<T>(component[destroy$]);\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "updateContact",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Update contact',\r\n  props<{ id: string; contact: UpdateContactModel }>()\r\n)"
            },
            {
                "name": "updateContactFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Update contact failure',\r\n  props<{ error: HttpError }>()\r\n)"
            },
            {
                "name": "updateContactSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/actions/contact.action.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Contact] Update contact success',\r\n  props<{ contact: ContactModel }>()\r\n)"
            },
            {
                "name": "WEB_STORAGE_CONFIGURATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/web-storage/web-storage.config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<WebStorageConfiguration>\r\n  ('Web storage configuration token')"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/contact/selectors/contact.selector.ts",
                "type": "",
                "defaultValue": "fromContact.adapter.getSelectors(selectContactEntitiesState)"
            }
        ],
        "functions": [
            {
                "name": "addDestroyObservableToComponent",
                "file": "src/app/core/destroyable/take-until-destroy.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "component",
                        "type": "any"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "component",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "appSettingsReducer",
                "file": "src/app/core/store/app-settings/app-settings.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "authReducer",
                "file": "src/app/auth/reducers/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "i18nLoaderFactory",
                "file": "src/app/core/i18n/i18n-loader.factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "i18nMultiModuleLoaderFactory",
                "file": "src/app/core/i18n/i18n-loader.factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "localStorageSyncReducer",
                "file": "src/app/core/store/meta-reducers/local-storage-sync.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "reducer"
                    }
                ],
                "returnType": "ActionReducer<T, V>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "logger",
                "file": "src/app/core/store/meta-reducers/logger.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "reducer"
                    }
                ],
                "returnType": "ActionReducer<T, V>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "provideMockAuthConfig",
                "file": "src/app/auth/auth.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "optional": true
                    }
                ],
                "returnType": "Array<Provider>",
                "jsdoctags": [
                    {
                        "name": "config",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/admin/contact/reducers/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortByUsername",
                "file": "src/app/admin/contact/reducers/contact.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "a",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Language",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"en\" | \"vi\" | \"fr\"",
                "file": "src/app/core/i18n/language.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "HttpMethod",
                "childs": [
                    {
                        "name": "Get",
                        "value": "GET"
                    },
                    {
                        "name": "Post",
                        "value": "POST"
                    },
                    {
                        "name": "Put",
                        "value": "PUT"
                    },
                    {
                        "name": "Delete",
                        "value": "DELETE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/http/http-method.ts"
            },
            {
                "name": "Keys",
                "childs": [
                    {
                        "name": "esc",
                        "value": "27"
                    },
                    {
                        "name": "enter",
                        "value": "13"
                    },
                    {
                        "name": "down",
                        "value": "40"
                    },
                    {
                        "name": "left",
                        "value": "37"
                    },
                    {
                        "name": "right",
                        "value": "39"
                    },
                    {
                        "name": "up",
                        "value": "38"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/keyboard.ts"
            },
            {
                "name": "MessageType",
                "childs": [
                    {
                        "name": "text",
                        "value": "text"
                    },
                    {
                        "name": "image",
                        "value": "image"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/admin/chat/models/message.ts"
            }
        ],
        "groupedVariables": {
            "src/app/admin/contact/reducers/contact.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/reducers/contact.reducer.ts",
                    "type": "EntityAdapter<ContactModel>",
                    "defaultValue": "createEntityAdapter<ContactModel>({\r\n  selectId: (contact: ContactModel) => contact.id,\r\n  sortComparer: sortByUsername,\r\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/reducers/contact.reducer.ts",
                    "type": "State",
                    "defaultValue": "adapter.getInitialState({})"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/reducers/contact.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(\r\n    ContactActions.findContactSuccess,\r\n    (state, { contacts }) => {\r\n      return adapter.addMany(contacts, state);\r\n    }\r\n  ),\r\n\r\n  on(\r\n    ContactActions.findContactByIdSuccess,\r\n    (state, { contact }) => {\r\n      return adapter.addOne(contact, state);\r\n    }\r\n  )\r\n)"
                }
            ],
            "src/app/configs/index.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/configs/index.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  i18n\r\n}"
                }
            ],
            "src/app/core/store/app-settings/app-settings.action.ts": [
                {
                    "name": "appSettingsAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/app-settings/app-settings.action.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  changeLanguage,\r\n  changeTheme\r\n}"
                },
                {
                    "name": "changeLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/app-settings/app-settings.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Settings] Change Language',\r\n  props<{ language: Language }>()\r\n)"
                },
                {
                    "name": "changeTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/app-settings/app-settings.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Settings] Change Theme',\r\n  props<{ theme: string }>()\r\n)"
                }
            ],
            "src/app/core/store/app-settings/app-settings.selector.ts": [
                {
                    "name": "appSettingsSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/app-settings/app-settings.selector.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  selectAppSettingsState,\r\n  selectAppSettings,\r\n  selectCurrentLanguage\r\n}"
                },
                {
                    "name": "selectAppSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/app-settings/app-settings.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAppSettingsState,\r\n  (state: AppSettingsState) => state\r\n)"
                },
                {
                    "name": "selectAppSettingsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/app-settings/app-settings.selector.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<\r\n  AppState,\r\n  AppSettingsState\r\n>('appSettings')"
                },
                {
                    "name": "selectCurrentLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/app-settings/app-settings.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAppSettingsState,\r\n  (state: AppSettingsState) => state.language\r\n)"
                }
            ],
            "src/app/auth/auth.config.ts": [
                {
                    "name": "AUTH_CONFIGURATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/auth.config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<AuthConfiguration>('Auth configuration')"
                },
                {
                    "name": "authFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/auth.config.ts",
                    "type": "string",
                    "defaultValue": "'auth'"
                },
                {
                    "name": "defaultAuthConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/auth.config.ts",
                    "type": "AuthConfiguration",
                    "defaultValue": "{\r\n  loginURL: 'login',\r\n  loginApiURL: 'login',\r\n  headerName: 'Authorization',\r\n  skipWhenExpired: true,\r\n  whitelistedDomains: [],\r\n  blacklistedRoutes: []\r\n}"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "authConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "type": "AuthConfiguration",
                    "defaultValue": "{\r\n  loginURL: 'login',\r\n  loginApiURL: 'auth/login',\r\n  headerName: 'Authorization',\r\n  skipWhenExpired: true,\r\n  whitelistedDomains: [\r\n    environment.apiBaseUrl\r\n  ],\r\n  blacklistedRoutes: [\r\n    'auth/login'\r\n  ]\r\n}"
                }
            ],
            "src/app/auth/components/index.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/components/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  ForgotPasswordFromComponent,\r\n  LoginFormComponent,\r\n  LogoutConfirmationDialogComponent,\r\n  ResetPasswordFormComponent,\r\n  UnlockScreenFormComponent\r\n]"
                },
                {
                    "name": "ENTRY_COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/components/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  LogoutConfirmationDialogComponent\r\n]"
                }
            ],
            "src/app/admin/chat/components/index.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/chat/components/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  ChatMessageComponent,\r\n  ChatImageMessageComponent,\r\n  UserAvatarComponent\r\n]"
                }
            ],
            "src/app/admin/contact/components/index.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/components/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  ContactFormComponent,\r\n  ContactTableComponent\r\n]"
                }
            ],
            "src/app/admin/dashboard/containers/index.ts": [
                {
                    "name": "CONTAINER_COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/dashboard/containers/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  DashboardPageComponent\r\n]"
                }
            ],
            "src/app/auth/containers/index.ts": [
                {
                    "name": "CONTAINERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/containers/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  LoginPageComponent,\r\n  LockScreenPageComponent,\r\n  ForgotPasswordPageComponent,\r\n  ResetPasswordPageComponent\r\n]"
                }
            ],
            "src/app/admin/chat/containers/index.ts": [
                {
                    "name": "CONTAINERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/chat/containers/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  ChatBoxComponent,\r\n  ChatBoxHeaderComponent,\r\n  ChatBoxMessagesComponent,\r\n  ChatBoxFormComponent,\r\n  ChatPageComponent\r\n]"
                }
            ],
            "src/app/admin/contact/containers/index.ts": [
                {
                    "name": "CONTAINERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/containers/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  ContactCreatePageComponent,\r\n  ContactDetailPageComponent,\r\n  ContactListPageComponent\r\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "src/app/admin/contact/actions/contact.action.ts": [
                {
                    "name": "createContact",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Create contact',\r\n  props<{ contact: CreateContactModel }>()\r\n)"
                },
                {
                    "name": "createContactFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Create contact failure',\r\n  props<{ error: HttpError }>()\r\n)"
                },
                {
                    "name": "createContactSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Create contact success',\r\n  props<{ contact: ContactModel }>()\r\n)"
                },
                {
                    "name": "deleteContact",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Delete contact',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "deleteContactFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Delete contact failure',\r\n  props<{ error: HttpError }>()\r\n)"
                },
                {
                    "name": "deleteContactSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Delete contact success',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "findContact",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Find contact',\r\n  props<{ query: any }>()\r\n)"
                },
                {
                    "name": "findContactById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Find contact by id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "findContactByIdFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Find contact by id failure',\r\n  props<{ error: HttpError }>()\r\n)"
                },
                {
                    "name": "findContactByIdSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Find contact by id success',\r\n  props<{ contact: ContactModel }>()\r\n)"
                },
                {
                    "name": "findContactFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Find contact failure',\r\n  props<{ error: HttpError }>()\r\n)"
                },
                {
                    "name": "findContactSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Find contact success',\r\n  props<{ contacts: Array<ContactModel> }>()\r\n)"
                },
                {
                    "name": "updateContact",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Update contact',\r\n  props<{ id: string; contact: UpdateContactModel }>()\r\n)"
                },
                {
                    "name": "updateContactFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Update contact failure',\r\n  props<{ error: HttpError }>()\r\n)"
                },
                {
                    "name": "updateContactSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/actions/contact.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Contact] Update contact success',\r\n  props<{ contact: ContactModel }>()\r\n)"
                }
            ],
            "src/app/core/http/interceptors/retry-interceptor.ts": [
                {
                    "name": "defaultRetryStrategyConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/http/interceptors/retry-interceptor.ts",
                    "type": "RetryStrategyConfig",
                    "defaultValue": "{\r\n  maxRetryAttempts: environment.http.maxRetryAttempts,\r\n  scalingDuration: 1000,\r\n  excludedStatusCodes: [401, 403, 404]\r\n}"
                },
                {
                    "name": "genericRetryStrategy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/http/interceptors/retry-interceptor.ts",
                    "type": "",
                    "defaultValue": "(config: RetryStrategyConfig = defaultRetryStrategyConfig) =>\r\n  (attempts: Observable<any>) => {\r\n    return attempts.pipe(\r\n      mergeMap((error, i) => {\r\n        const retryAttempt = i + 1;\r\n        // if maximum number of retries have been met\r\n        // or response is a status code we don't wish to retry, throw error\r\n        if (retryAttempt > config.maxRetryAttempts ||\r\n          config.excludedStatusCodes.find(e => e === error.status)) {\r\n          return throwError(error);\r\n        }\r\n\r\n        return timer(retryAttempt * config.scalingDuration);\r\n      })\r\n    );\r\n  }"
                }
            ],
            "src/app/core/logger/sentry.config.ts": [
                {
                    "name": "defaultSentryConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/logger/sentry.config.ts",
                    "type": "SentryConfiguration",
                    "defaultValue": "{\r\n  dsn: '<your-dsn>',\r\n  environment: 'dev',\r\n  release: '<your-release>'\r\n}"
                }
            ],
            "src/app/core/web-storage/web-storage.config.ts": [
                {
                    "name": "defaultWebStorageConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/web-storage/web-storage.config.ts",
                    "type": "WebStorageConfiguration",
                    "defaultValue": "{\r\n  prefix: 'web_storage',\r\n  allowNull: true\r\n}"
                },
                {
                    "name": "WEB_STORAGE_CONFIGURATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/web-storage/web-storage.config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<WebStorageConfiguration>\r\n  ('Web storage configuration token')"
                }
            ],
            "src/app/core/destroyable/take-until-destroy.ts": [
                {
                    "name": "destroy$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/destroyable/take-until-destroy.ts",
                    "type": "",
                    "defaultValue": "Symbol('componentDestroy$')"
                },
                {
                    "name": "takeUntilDestroy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/destroyable/take-until-destroy.ts",
                    "type": "",
                    "defaultValue": "<T>(component: any): MonoTypeOperatorFunction<T> => {\r\n  if (component[destroy$] === undefined) {\r\n    addDestroyObservableToComponent(component);\r\n  }\r\n\r\n  return takeUntil<T>(component[destroy$]);\r\n}"
                }
            ],
            "src/app/shared/dialog/dialog.module.ts": [
                {
                    "name": "DIALOGS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/dialog/dialog.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  AlertDialogComponent,\r\n  ConfirmDialogComponent\r\n]"
                }
            ],
            "src/app/admin/contact/effects/index.ts": [
                {
                    "name": "EFFECTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/effects/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  ContactEffect\r\n]"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  enableLogger: true,\r\n  apiBaseUrl: 'https://angular-starter-api.herokuapp.com/',\r\n  http: {\r\n    maxRetryAttempts: 0\r\n  }\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  enableLogger: false,\r\n  apiBaseUrl: 'https://angular-starter-api.herokuapp.com/',\r\n  http: {\r\n    maxRetryAttempts: 0\r\n  }\r\n}"
                }
            ],
            "src/app/admin/contact/contact.config.ts": [
                {
                    "name": "featureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/contact.config.ts",
                    "type": "string",
                    "defaultValue": "'contact'"
                }
            ],
            "src/app/auth/reducers/auth.reducer.ts": [
                {
                    "name": "getAuthToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.authToken"
                },
                {
                    "name": "getLoggedInUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.loggedInUser"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  authToken: undefined,\r\n  loggedInUser: {\r\n    id: 'fcad7516-9fec',\r\n    username: 'ponyaim',\r\n    avatarUrl: './assets/images/dev.png'\r\n  }\r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(AuthApiActions.loginSuccess, (state, { authToken }) => ({\r\n    ...state,\r\n    authToken\r\n  })),\r\n\r\n  on(AuthActions.lock, (state) => ({\r\n    ...state,\r\n    authToken: undefined\r\n  })),\r\n\r\n  on(AuthActions.logout, () => initialState)\r\n)"
                },
                {
                    "name": "statusFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "string",
                    "defaultValue": "'status'"
                }
            ],
            "src/app/auth/reducers/reset-password-page.reducer.ts": [
                {
                    "name": "getError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.error"
                },
                {
                    "name": "getPending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.pending"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  error: null,\r\n  pending: false,\r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(ResetPasswordActions.sendResetPasswordLink, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: true,\r\n  })),\r\n\r\n  on(ResetPasswordActions.sendResetPasswordLinkSuccess, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: false,\r\n  })),\r\n\r\n  on(ResetPasswordActions.sendResetPasswordLinkFailure, (state, { error }) => ({\r\n    ...state,\r\n    error,\r\n    pending: false,\r\n  }))\r\n)"
                },
                {
                    "name": "resetPasswordPageFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/reset-password-page.reducer.ts",
                    "type": "string",
                    "defaultValue": "'resetPasswordPage'"
                }
            ],
            "src/app/auth/reducers/login-page.reducer.ts": [
                {
                    "name": "getError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/login-page.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.error"
                },
                {
                    "name": "getPending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/login-page.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.pending"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/login-page.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  error: null,\r\n  pending: false,\r\n}"
                },
                {
                    "name": "loginPageFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/login-page.reducer.ts",
                    "type": "string",
                    "defaultValue": "'loginPage'"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/login-page.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(LoginPageActions.login, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: true,\r\n  })),\r\n\r\n  on(LoginPageActions.leavePage, state => ({\r\n    ...state,\r\n    error: null\r\n  })),\r\n\r\n  on(AuthApiActions.loginSuccess, state => ({\r\n    ...state,\r\n    error: null,\r\n    pending: false,\r\n  })),\r\n\r\n  on(AuthApiActions.loginFailure, (state, { error }) => ({\r\n    ...state,\r\n    error,\r\n    pending: false,\r\n  }))\r\n)"
                }
            ],
            "src/app/configs/i18n.config.ts": [
                {
                    "name": "i18n",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/configs/i18n.config.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  prefix: '/assets/i18n',\r\n  modules: [\r\n    'general',\r\n    'auth',\r\n    'account',\r\n    'contact'\r\n  ]\r\n}"
                }
            ],
            "src/app/admin/contact/reducers/contact-detail-page.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/reducers/contact-detail-page.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  loading: false,\r\n  saving: false\r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/reducers/contact-detail-page.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(\r\n    ContactActions.findContactById,\r\n    (state) => ({ ...state, loading: true })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.updateContact,\r\n    (state) => ({ ...state, saving: true })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.findContactByIdSuccess,\r\n    ContactActions.findContactByIdFailure,\r\n    (state) => ({ ...state, loading: false })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.updateContactSuccess,\r\n    ContactActions.updateContactFailure,\r\n    (state) => ({ ...state, saving: false })\r\n  )\r\n)"
                }
            ],
            "src/app/admin/contact/reducers/contact-list-page.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/reducers/contact-list-page.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  pending: false\r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/reducers/contact-list-page.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(\r\n    ContactActions.findContact,\r\n    (state) => ({ ...state, pending: true })\r\n  ),\r\n\r\n  on(\r\n    ContactActions.findContactSuccess,\r\n    ContactActions.findContactFailure,\r\n    (state) => ({ ...state, pending: false })\r\n  )\r\n)"
                }
            ],
            "src/app/core/store/app-settings/app-settings.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/app-settings/app-settings.reducer.ts",
                    "type": "AppSettingsState",
                    "defaultValue": "{\r\n  language: 'en',\r\n  theme: 'DEFAULT-THEME'\r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/app-settings/app-settings.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(\r\n    appSettingsAction.changeLanguage,\r\n    (state, { language }) => ({ ...state, language })\r\n  ),\r\n)"
                }
            ],
            "src/app/core/data-table/pagination.model.ts": [
                {
                    "name": "initPagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/data-table/pagination.model.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  pageSize: 10,\r\n  pageNumber: 0,\r\n  totalElement: undefined,\r\n  totalPages: undefined\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/app/auth/actions/login-page.action.ts": [
                {
                    "name": "leavePage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/login-page.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Login Page] leave page'\r\n)"
                },
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/login-page.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Login Page] Login',\r\n  props<{ credential: Credential }>()\r\n)"
                }
            ],
            "src/app/auth/actions/auth.action.ts": [
                {
                    "name": "lock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Lock screen'\r\n)"
                },
                {
                    "name": "loginRedirect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Login Redirect'\r\n)"
                },
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Logout'\r\n)"
                },
                {
                    "name": "logoutConfirmation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Logout Confirmation'\r\n)"
                },
                {
                    "name": "logoutConfirmationDismiss",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Logout Confirmation Dismiss'\r\n)"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/core/logger/logger.config.ts": [
                {
                    "name": "loggerConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/logger/logger.config.ts",
                    "type": "LoggerConfiguration",
                    "defaultValue": "{\r\n  enable: environment.enableLogger\r\n}"
                }
            ],
            "src/app/auth/actions/auth-api.action.ts": [
                {
                    "name": "loginFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth-api.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth/API] Login Failure',\r\n  props<{ error: HttpError }>()\r\n)"
                },
                {
                    "name": "loginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth-api.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth/API] Login Success',\r\n  props<{ authToken: AuthToken }>()\r\n)"
                }
            ],
            "src/app/admin/admin.module.ts": [
                {
                    "name": "MAT_MODULES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/admin.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatIconModule\r\n]"
                }
            ],
            "src/app/auth/auth.module.ts": [
                {
                    "name": "MAT_MODULES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/auth.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatCardModule,\r\n  MatDialogModule,\r\n  MatProgressBarModule\r\n]"
                }
            ],
            "src/app/home/home.module.ts": [
                {
                    "name": "MAT_MODULES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/home.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatMenuModule,\r\n  MatIconModule,\r\n  MatCardModule,\r\n]"
                }
            ],
            "src/app/admin/contact/contact.module.ts": [
                {
                    "name": "MAT_MODULES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/contact.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatTableModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatCheckboxModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatDialogModule,\r\n  MatMenuModule,\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatTabsModule\r\n]"
                }
            ],
            "src/app/core/store/reducer.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducer.ts",
                    "type": "Array<MetaReducer<AppState>>",
                    "defaultValue": "!env.production\r\n  ? [logger, localStorageSyncReducer]\r\n  : [localStorageSyncReducer]"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducer.ts",
                    "type": "ActionReducerMap<AppState, Action>",
                    "defaultValue": "{\r\n  router: routerReducer,\r\n  appSettings: appSettingsReducer\r\n}"
                }
            ],
            "src/app/auth/actions/reset-password.action.ts": [
                {
                    "name": "resetPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/reset-password.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[RESET PASSWORD] reset password',\r\n  props<{ password: string }>()\r\n)"
                },
                {
                    "name": "resetPasswordFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/reset-password.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[RESET PASSWORD] reset password failure',\r\n  props<{ error: HttpError }>()\r\n)"
                },
                {
                    "name": "resetPasswordSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/reset-password.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[RESET PASSWORD] reset password success',\r\n  props<{ response: any }>()\r\n)"
                },
                {
                    "name": "sendResetPasswordLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/reset-password.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[RESET PASSWORD] send reset password link',\r\n  props<{ email: string }>()\r\n)"
                },
                {
                    "name": "sendResetPasswordLinkFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/reset-password.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[RESET PASSWORD] send reset password link failure',\r\n  props<{ error: HttpError }>()\r\n)"
                },
                {
                    "name": "sendResetPasswordLinkSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/reset-password.action.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[RESET PASSWORD] send reset password link success',\r\n  props<{ response: any }>()\r\n)"
                }
            ],
            "src/app/admin/layout/admin-layout/animations.ts": [
                {
                    "name": "routeAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/layout/admin-layout/animations.ts",
                    "type": "",
                    "defaultValue": "trigger('routeAnimations', [\r\n    state('open', style({\r\n      opacity: 1,\r\n      backgroundColor: 'yellow'\r\n    })),\r\n    state('closed', style({\r\n      opacity: 0.5,\r\n      backgroundColor: 'green'\r\n    })),\r\n\r\n    transition('open => closed', [\r\n      animate('1s')\r\n    ]),\r\n    transition('closed => open', [\r\n      animate('0.5s')\r\n    ])\r\n  ])"
                },
                {
                    "name": "slideInTop",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/layout/admin-layout/animations.ts",
                    "type": "",
                    "defaultValue": "trigger('slideInTop', [\r\n    state('void', style({\r\n      opacity: 0.5,\r\n      transform: 'translateY(-100%)',\r\n      display: 'none'\r\n    })),\r\n    state('*', style({\r\n      transform: 'translateY(0)',\r\n      backgroundColor: 'green',\r\n      display: 'flex'\r\n    })),\r\n    transition('void => *', animate('300ms')),\r\n    transition('* => *', animate('300ms'))\r\n  ])"
                }
            ],
            "src/app/auth/reducers/index.ts": [
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AuthState>(\r\n  authFeatureKey\r\n)"
                }
            ],
            "src/app/auth/selectors/auth.selector.ts": [
                {
                    "name": "selectAuthStatusState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/selectors/auth.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: AuthState) => state.status\r\n)"
                },
                {
                    "name": "selectAuthToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/selectors/auth.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAuthStatusState,\r\n  fromAuth.getAuthToken\r\n)"
                },
                {
                    "name": "selectIsAuthenticated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/selectors/auth.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAuthToken,\r\n  (authToken: AuthToken): boolean => {\r\n    return authToken && AuthToken.isValid(authToken);\r\n  }\r\n)"
                },
                {
                    "name": "selectLoggedInUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/selectors/auth.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAuthStatusState,\r\n  fromAuth.getLoggedInUser\r\n)"
                }
            ],
            "src/app/admin/contact/selectors/contact.selector.ts": [
                {
                    "name": "selectContactById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/selectors/contact.selector.ts",
                    "type": "",
                    "defaultValue": "(id: string) => createSelector(\r\n  selectContactEntities,\r\n  (contactEntities) => contactEntities[id]\r\n)"
                },
                {
                    "name": "selectContactEntitiesState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/selectors/contact.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectContactState,\r\n  state => state.contact\r\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/selectors/contact.selector.ts",
                    "type": "",
                    "defaultValue": "fromContact.adapter.getSelectors(selectContactEntitiesState)"
                }
            ],
            "src/app/admin/contact/selectors/contact-detail-page.selector.ts": [
                {
                    "name": "selectContactDetailPageLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/selectors/contact-detail-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectContactDetailPageState,\r\n  (contactDetailPageState) => contactDetailPageState.loading\r\n)"
                },
                {
                    "name": "selectContactDetailPageSaving",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/selectors/contact-detail-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectContactDetailPageState,\r\n  (contactDetailPageState) => contactDetailPageState.saving\r\n)"
                },
                {
                    "name": "selectContactDetailPageState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/selectors/contact-detail-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectContactState,\r\n  state => state.contactDetailPage\r\n)"
                }
            ],
            "src/app/admin/contact/selectors/contact-list-page.selector.ts": [
                {
                    "name": "selectContactListPagePending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/selectors/contact-list-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectContactListPageState,\r\n  (contactListPageState) => contactListPageState.pending\r\n)"
                },
                {
                    "name": "selectContactListPageState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/selectors/contact-list-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectContactState,\r\n  state => state.contactListPage\r\n)"
                }
            ],
            "src/app/admin/contact/reducers/index.ts": [
                {
                    "name": "selectContactState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ContactState>(featureKey)"
                }
            ],
            "src/app/auth/selectors/login-page.selector.ts": [
                {
                    "name": "selectLoginPageError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/selectors/login-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectLoginPageState,\r\n  fromLoginPage.getError\r\n)"
                },
                {
                    "name": "selectLoginPagePending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/selectors/login-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectLoginPageState,\r\n  fromLoginPage.getPending\r\n)"
                },
                {
                    "name": "selectLoginPageState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/selectors/login-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: AuthState) => state.loginPage\r\n)"
                }
            ],
            "src/app/auth/selectors/reset-password-page.selector.ts": [
                {
                    "name": "selectResetPasswordPageError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/selectors/reset-password-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectResetPasswordPageState,\r\n  fromResetPasswordPage.getError\r\n)"
                },
                {
                    "name": "selectResetPasswordPagePending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/selectors/reset-password-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectResetPasswordPageState,\r\n  fromResetPasswordPage.getPending\r\n)"
                },
                {
                    "name": "selectResetPasswordPageState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/selectors/reset-password-page.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: AuthState) => state.resetPasswordPage\r\n)"
                }
            ],
            "src/app/admin/contact/services/index.ts": [
                {
                    "name": "SERVICES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/contact/services/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  ContactService\r\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/destroyable/take-until-destroy.ts": [
                {
                    "name": "addDestroyObservableToComponent",
                    "file": "src/app/core/destroyable/take-until-destroy.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "component",
                            "type": "any"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/app-settings/app-settings.reducer.ts": [
                {
                    "name": "appSettingsReducer",
                    "file": "src/app/core/store/app-settings/app-settings.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/auth/reducers/index.ts": [
                {
                    "name": "authReducer",
                    "file": "src/app/auth/reducers/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/i18n/i18n-loader.factory.ts": [
                {
                    "name": "i18nLoaderFactory",
                    "file": "src/app/core/i18n/i18n-loader.factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "i18nMultiModuleLoaderFactory",
                    "file": "src/app/core/i18n/i18n-loader.factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/meta-reducers/local-storage-sync.reducer.ts": [
                {
                    "name": "localStorageSyncReducer",
                    "file": "src/app/core/store/meta-reducers/local-storage-sync.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer"
                        }
                    ],
                    "returnType": "ActionReducer<T, V>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/meta-reducers/logger.reducer.ts": [
                {
                    "name": "logger",
                    "file": "src/app/core/store/meta-reducers/logger.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer"
                        }
                    ],
                    "returnType": "ActionReducer<T, V>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/auth/auth.config.ts": [
                {
                    "name": "provideMockAuthConfig",
                    "file": "src/app/auth/auth.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "config",
                            "optional": true
                        }
                    ],
                    "returnType": "Array<Provider>",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/admin/contact/reducers/index.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/admin/contact/reducers/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/admin/contact/reducers/contact.reducer.ts": [
                {
                    "name": "sortByUsername",
                    "file": "src/app/admin/contact/reducers/contact.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "a"
                        },
                        {
                            "name": "b"
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/core/http/http-method.ts": [
                {
                    "name": "HttpMethod",
                    "childs": [
                        {
                            "name": "Get",
                            "value": "GET"
                        },
                        {
                            "name": "Post",
                            "value": "POST"
                        },
                        {
                            "name": "Put",
                            "value": "PUT"
                        },
                        {
                            "name": "Delete",
                            "value": "DELETE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/http/http-method.ts"
                }
            ],
            "src/app/core/keyboard.ts": [
                {
                    "name": "Keys",
                    "childs": [
                        {
                            "name": "esc",
                            "value": "27"
                        },
                        {
                            "name": "enter",
                            "value": "13"
                        },
                        {
                            "name": "down",
                            "value": "40"
                        },
                        {
                            "name": "left",
                            "value": "37"
                        },
                        {
                            "name": "right",
                            "value": "39"
                        },
                        {
                            "name": "up",
                            "value": "38"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/keyboard.ts"
                }
            ],
            "src/app/admin/chat/models/message.ts": [
                {
                    "name": "MessageType",
                    "childs": [
                        {
                            "name": "text",
                            "value": "text"
                        },
                        {
                            "name": "image",
                            "value": "image"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/admin/chat/models/message.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/core/i18n/language.ts": [
                {
                    "name": "Language",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"en\" | \"vi\" | \"fr\"",
                    "file": "src/app/core/i18n/language.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "./home/home.module#HomeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/home/home-routing.module.ts",
                                        "module": "HomeRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "HomePageComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HomeModule"
                            }
                        ]
                    },
                    {
                        "path": "admin",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "loadChildren": "./admin/admin.module#AdminModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/admin/admin-routing.module.ts",
                                        "module": "AdminRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AdminLayoutComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "loadChildren": "./dashboard/dashboard.module#DashboardModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/admin/dashboard/dashboard-routing.module.ts",
                                                                        "module": "DashboardRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "DashboardPageComponent"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "DashboardModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "contacts",
                                                        "loadChildren": "./contact/contact.module#ContactModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/admin/contact/contact.routing.module.ts",
                                                                        "module": "ContactRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "ContactListPageComponent"
                                                                            },
                                                                            {
                                                                                "path": "create",
                                                                                "component": "ContactCreatePageComponent"
                                                                            },
                                                                            {
                                                                                "path": ":id",
                                                                                "component": "ContactDetailPageComponent"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "ContactModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "chat",
                                                        "loadChildren": "./chat/chat.module#ChatModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/admin/chat/chat-routing.module.ts",
                                                                        "module": "ChatRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "ChatPageComponent"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "ChatModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "**",
                                                        "redirectTo": ""
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AdminModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginPageComponent"
                    },
                    {
                        "path": "lock",
                        "component": "LockScreenPageComponent"
                    },
                    {
                        "path": "forgot-password",
                        "component": "ForgotPasswordPageComponent"
                    },
                    {
                        "path": "reset-password",
                        "component": "ResetPasswordPageComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/account/settings-page/settings-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/admin.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAT_MODULES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/components/chat-image-message/chat-image-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatImageMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/components/chat-message/chat-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/components/chat-text-message/chat-text-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatTextMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/components/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/components/user-avatar/user-avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserAvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/containers/chat-box-form/chat-box-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatBoxFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/containers/chat-box-header/chat-box-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatBoxHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/containers/chat-box-messages/chat-box-messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatBoxMessagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/containers/chat-box/chat-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/containers/chat-page/chat-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/containers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTAINERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/models/message.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageMessage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/models/message.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/models/message.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MessageGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/models/message.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MessagePayload",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/chat/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createContact",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createContactFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createContactSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteContact",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteContactFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteContactSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "findContact",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "findContactById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "findContactByIdFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "findContactByIdSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "findContactFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "findContactSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateContact",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateContactFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/actions/contact.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateContactSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/components/contact-form/contact-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/components/contact-table/contact-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/components/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/contact.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "featureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/contact.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAT_MODULES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/containers/contact-create-page/contact-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/containers/contact-detail-page/contact-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/containers/contact-list-page/contact-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/containers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTAINERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/effects/contact.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContactEffect",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/effects/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EFFECTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/models/contact.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContactModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/models/create-contact.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateContactModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/models/update-contact.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateContactModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact-detail-page.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact-detail-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact-detail-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact-list-page.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact-list-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact-list-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "sortByUsername",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/contact.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContactState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/index.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContactState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/selectors/contact-detail-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContactDetailPageLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/selectors/contact-detail-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContactDetailPageSaving",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/selectors/contact-detail-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContactDetailPageState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/selectors/contact-list-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContactListPagePending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/selectors/contact-list-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContactListPageState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/selectors/contact.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContactById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/selectors/contact.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContactEntitiesState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/selectors/contact.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/services/contact.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContactService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/contact/services/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SERVICES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/dashboard/containers/dashboard-page/dashboard-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/dashboard/containers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTAINER_COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/layout/admin-layout/admin-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/layout/admin-layout/animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routeAnimations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/layout/admin-layout/animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "slideInTop",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/layout/sidebar/admin-sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminSidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/layout/toolbar/admin-toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth-api.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth-api.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginRedirect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logoutConfirmation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logoutConfirmationDismiss",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/login-page.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "leavePage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/login-page.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/reset-password.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/reset-password.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPasswordFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/reset-password.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPasswordSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/reset-password.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sendResetPasswordLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/reset-password.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sendResetPasswordLinkFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/reset-password.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sendResetPasswordLinkSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.config.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "provideMockAuthConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_CONFIGURATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultAuthConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAT_MODULES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/forgot-password-from/forgot-password-from.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordFromComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENTRY_COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/logout-confirmation/logout-confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoutConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/reset-password-form/reset-password-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/unlock-screen-form/unlock-screen-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UnlockScreenFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/containers/forgot-password-page/forgot-password-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/containers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTAINERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/containers/lock-screen-page/lock-screen-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LockScreenPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/containers/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/containers/reset-password-page/reset-password-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/effects/auth.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/interceptors/auth-interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/auth-token.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthToken",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/credential.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Credential",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserProfile",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAuthToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLoggedInUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginPageFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/login-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/reset-password-page.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPasswordPageFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/selectors/auth.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthStatusState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/selectors/auth.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/selectors/auth.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsAuthenticated",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/selectors/auth.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoggedInUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/selectors/login-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoginPageError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/selectors/login-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoginPagePending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/selectors/login-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoginPageState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/selectors/reset-password-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectResetPasswordPageError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/selectors/reset-password-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectResetPasswordPagePending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/selectors/reset-password-page.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectResetPasswordPageState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/configs/i18n.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "i18n",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/configs/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data-table/pagination.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data-table/pagination.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initPagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/destroyable/take-until-destroy.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "addDestroyObservableToComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/destroyable/take-until-destroy.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "destroy$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/destroyable/take-until-destroy.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "takeUntilDestroy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/exception/app-error-handler.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppErrorHandler",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/exception/http-action-error.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HttpActionError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/exception/http-error.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HttpError",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/form/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormValueChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/interceptors/api-prefix.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ApiPrefixInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/interceptors/error-handler.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorHandlerInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/interceptors/http-header.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpHeaderInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/interceptors/response-interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ResponseInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/interceptors/retry-interceptor.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RetryStrategyConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/interceptors/retry-interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "RetryHttpRequestInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/interceptors/retry-interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultRetryStrategyConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/interceptors/retry-interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "genericRetryStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/i18n/i18n-loader.factory.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "i18nLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/i18n/i18n-loader.factory.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "i18nMultiModuleLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/i18n/i18n-multi-module-loader.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MultiModuleTranslateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/logger/logger.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoggerConfiguration",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/logger/logger.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loggerConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/logger/logger.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoggerService",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/logger/sentry.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SentryConfiguration",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/logger/sentry.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultSentryConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/logger/sentry.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SentryService",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/network/network.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NetworkService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/router/custom-preloading.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomPreloadModulesStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/router/router-serializer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomRouterStateSerializer",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/router/router.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/seo/seo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SeoService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appSettingsAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppSettingsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppSettingsState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "appSettingsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appSettingsSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAppSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAppSettingsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/app-settings/app-settings.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/meta-reducers/local-storage-sync.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "localStorageSyncReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/meta-reducers/logger.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "logger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/web-storage/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/web-storage/web-storage.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WebStorageConfiguration",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/core/web-storage/web-storage.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultWebStorageConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/web-storage/web-storage.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WEB_STORAGE_CONFIGURATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/containers/home-page/home-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAT_MODULES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dialog/alert-dialog/alert-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dialog/confirm-dialog/confirm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dialog/dialog.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOGS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/notification/notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/notification/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/notification/notification.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/slider/slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/form-validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormValidators",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}